// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: automationservice.proto

package automationservice

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	automation "vitess.io/vitess/go/vt/proto/automation"
)

type drpcEncoding_File_automationservice_proto struct{}

func (drpcEncoding_File_automationservice_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_automationservice_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_automationservice_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_automationservice_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCAutomationClient interface {
	DRPCConn() drpc.Conn

	EnqueueClusterOperation(ctx context.Context, in *automation.EnqueueClusterOperationRequest) (*automation.EnqueueClusterOperationResponse, error)
	GetClusterOperationDetails(ctx context.Context, in *automation.GetClusterOperationDetailsRequest) (*automation.GetClusterOperationDetailsResponse, error)
}

type drpcAutomationClient struct {
	cc drpc.Conn
}

func NewDRPCAutomationClient(cc drpc.Conn) DRPCAutomationClient {
	return &drpcAutomationClient{cc}
}

func (c *drpcAutomationClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAutomationClient) EnqueueClusterOperation(ctx context.Context, in *automation.EnqueueClusterOperationRequest) (*automation.EnqueueClusterOperationResponse, error) {
	out := new(automation.EnqueueClusterOperationResponse)
	err := c.cc.Invoke(ctx, "/automationservice.Automation/EnqueueClusterOperation", drpcEncoding_File_automationservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAutomationClient) GetClusterOperationDetails(ctx context.Context, in *automation.GetClusterOperationDetailsRequest) (*automation.GetClusterOperationDetailsResponse, error) {
	out := new(automation.GetClusterOperationDetailsResponse)
	err := c.cc.Invoke(ctx, "/automationservice.Automation/GetClusterOperationDetails", drpcEncoding_File_automationservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAutomationServer interface {
	EnqueueClusterOperation(context.Context, *automation.EnqueueClusterOperationRequest) (*automation.EnqueueClusterOperationResponse, error)
	GetClusterOperationDetails(context.Context, *automation.GetClusterOperationDetailsRequest) (*automation.GetClusterOperationDetailsResponse, error)
}

type DRPCAutomationUnimplementedServer struct{}

func (s *DRPCAutomationUnimplementedServer) EnqueueClusterOperation(context.Context, *automation.EnqueueClusterOperationRequest) (*automation.EnqueueClusterOperationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCAutomationUnimplementedServer) GetClusterOperationDetails(context.Context, *automation.GetClusterOperationDetailsRequest) (*automation.GetClusterOperationDetailsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCAutomationDescription struct{}

func (DRPCAutomationDescription) NumMethods() int { return 2 }

func (DRPCAutomationDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/automationservice.Automation/EnqueueClusterOperation", drpcEncoding_File_automationservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAutomationServer).
					EnqueueClusterOperation(
						ctx,
						in1.(*automation.EnqueueClusterOperationRequest),
					)
			}, DRPCAutomationServer.EnqueueClusterOperation, true
	case 1:
		return "/automationservice.Automation/GetClusterOperationDetails", drpcEncoding_File_automationservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAutomationServer).
					GetClusterOperationDetails(
						ctx,
						in1.(*automation.GetClusterOperationDetailsRequest),
					)
			}, DRPCAutomationServer.GetClusterOperationDetails, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAutomation(mux drpc.Mux, impl DRPCAutomationServer) error {
	return mux.Register(impl, DRPCAutomationDescription{})
}

type DRPCAutomation_EnqueueClusterOperationStream interface {
	drpc.Stream
	SendAndClose(*automation.EnqueueClusterOperationResponse) error
}

type drpcAutomation_EnqueueClusterOperationStream struct {
	drpc.Stream
}

func (x *drpcAutomation_EnqueueClusterOperationStream) SendAndClose(m *automation.EnqueueClusterOperationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_automationservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAutomation_GetClusterOperationDetailsStream interface {
	drpc.Stream
	SendAndClose(*automation.GetClusterOperationDetailsResponse) error
}

type drpcAutomation_GetClusterOperationDetailsStream struct {
	drpc.Stream
}

func (x *drpcAutomation_GetClusterOperationDetailsStream) SendAndClose(m *automation.GetClusterOperationDetailsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_automationservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
