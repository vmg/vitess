// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: vtworkerservice.proto

package vtworkerservice

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	vtworkerdata "vitess.io/vitess/go/vt/proto/vtworkerdata"
)

type drpcEncoding_File_vtworkerservice_proto struct{}

func (drpcEncoding_File_vtworkerservice_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_vtworkerservice_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_vtworkerservice_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_vtworkerservice_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCVtworkerClient interface {
	DRPCConn() drpc.Conn

	ExecuteVtworkerCommand(ctx context.Context, in *vtworkerdata.ExecuteVtworkerCommandRequest) (DRPCVtworker_ExecuteVtworkerCommandClient, error)
}

type drpcVtworkerClient struct {
	cc drpc.Conn
}

func NewDRPCVtworkerClient(cc drpc.Conn) DRPCVtworkerClient {
	return &drpcVtworkerClient{cc}
}

func (c *drpcVtworkerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcVtworkerClient) ExecuteVtworkerCommand(ctx context.Context, in *vtworkerdata.ExecuteVtworkerCommandRequest) (DRPCVtworker_ExecuteVtworkerCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, "/vtworkerservice.Vtworker/ExecuteVtworkerCommand", drpcEncoding_File_vtworkerservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcVtworker_ExecuteVtworkerCommandClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_vtworkerservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCVtworker_ExecuteVtworkerCommandClient interface {
	drpc.Stream
	Recv() (*vtworkerdata.ExecuteVtworkerCommandResponse, error)
}

type drpcVtworker_ExecuteVtworkerCommandClient struct {
	drpc.Stream
}

func (x *drpcVtworker_ExecuteVtworkerCommandClient) Recv() (*vtworkerdata.ExecuteVtworkerCommandResponse, error) {
	m := new(vtworkerdata.ExecuteVtworkerCommandResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_vtworkerservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

type DRPCVtworkerServer interface {
	ExecuteVtworkerCommand(*vtworkerdata.ExecuteVtworkerCommandRequest, DRPCVtworker_ExecuteVtworkerCommandStream) error
}

type DRPCVtworkerUnimplementedServer struct{}

func (s *DRPCVtworkerUnimplementedServer) ExecuteVtworkerCommand(*vtworkerdata.ExecuteVtworkerCommandRequest, DRPCVtworker_ExecuteVtworkerCommandStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCVtworkerDescription struct{}

func (DRPCVtworkerDescription) NumMethods() int { return 1 }

func (DRPCVtworkerDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/vtworkerservice.Vtworker/ExecuteVtworkerCommand", drpcEncoding_File_vtworkerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCVtworkerServer).
					ExecuteVtworkerCommand(
						in1.(*vtworkerdata.ExecuteVtworkerCommandRequest),
						&drpcVtworker_ExecuteVtworkerCommandStream{in2.(drpc.Stream)},
					)
			}, DRPCVtworkerServer.ExecuteVtworkerCommand, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterVtworker(mux drpc.Mux, impl DRPCVtworkerServer) error {
	return mux.Register(impl, DRPCVtworkerDescription{})
}

type DRPCVtworker_ExecuteVtworkerCommandStream interface {
	drpc.Stream
	Send(*vtworkerdata.ExecuteVtworkerCommandResponse) error
}

type drpcVtworker_ExecuteVtworkerCommandStream struct {
	drpc.Stream
}

func (x *drpcVtworker_ExecuteVtworkerCommandStream) Send(m *vtworkerdata.ExecuteVtworkerCommandResponse) error {
	return x.MsgSend(m, drpcEncoding_File_vtworkerservice_proto{})
}
