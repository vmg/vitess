// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: throttlerservice.proto

package throttlerservice

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	throttlerdata "vitess.io/vitess/go/vt/proto/throttlerdata"
)

type drpcEncoding_File_throttlerservice_proto struct{}

func (drpcEncoding_File_throttlerservice_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_throttlerservice_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_throttlerservice_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_throttlerservice_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCThrottlerClient interface {
	DRPCConn() drpc.Conn

	MaxRates(ctx context.Context, in *throttlerdata.MaxRatesRequest) (*throttlerdata.MaxRatesResponse, error)
	SetMaxRate(ctx context.Context, in *throttlerdata.SetMaxRateRequest) (*throttlerdata.SetMaxRateResponse, error)
	GetConfiguration(ctx context.Context, in *throttlerdata.GetConfigurationRequest) (*throttlerdata.GetConfigurationResponse, error)
	UpdateConfiguration(ctx context.Context, in *throttlerdata.UpdateConfigurationRequest) (*throttlerdata.UpdateConfigurationResponse, error)
	ResetConfiguration(ctx context.Context, in *throttlerdata.ResetConfigurationRequest) (*throttlerdata.ResetConfigurationResponse, error)
}

type drpcThrottlerClient struct {
	cc drpc.Conn
}

func NewDRPCThrottlerClient(cc drpc.Conn) DRPCThrottlerClient {
	return &drpcThrottlerClient{cc}
}

func (c *drpcThrottlerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcThrottlerClient) MaxRates(ctx context.Context, in *throttlerdata.MaxRatesRequest) (*throttlerdata.MaxRatesResponse, error) {
	out := new(throttlerdata.MaxRatesResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/MaxRates", drpcEncoding_File_throttlerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcThrottlerClient) SetMaxRate(ctx context.Context, in *throttlerdata.SetMaxRateRequest) (*throttlerdata.SetMaxRateResponse, error) {
	out := new(throttlerdata.SetMaxRateResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/SetMaxRate", drpcEncoding_File_throttlerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcThrottlerClient) GetConfiguration(ctx context.Context, in *throttlerdata.GetConfigurationRequest) (*throttlerdata.GetConfigurationResponse, error) {
	out := new(throttlerdata.GetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/GetConfiguration", drpcEncoding_File_throttlerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcThrottlerClient) UpdateConfiguration(ctx context.Context, in *throttlerdata.UpdateConfigurationRequest) (*throttlerdata.UpdateConfigurationResponse, error) {
	out := new(throttlerdata.UpdateConfigurationResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/UpdateConfiguration", drpcEncoding_File_throttlerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcThrottlerClient) ResetConfiguration(ctx context.Context, in *throttlerdata.ResetConfigurationRequest) (*throttlerdata.ResetConfigurationResponse, error) {
	out := new(throttlerdata.ResetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/throttlerservice.Throttler/ResetConfiguration", drpcEncoding_File_throttlerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCThrottlerServer interface {
	MaxRates(context.Context, *throttlerdata.MaxRatesRequest) (*throttlerdata.MaxRatesResponse, error)
	SetMaxRate(context.Context, *throttlerdata.SetMaxRateRequest) (*throttlerdata.SetMaxRateResponse, error)
	GetConfiguration(context.Context, *throttlerdata.GetConfigurationRequest) (*throttlerdata.GetConfigurationResponse, error)
	UpdateConfiguration(context.Context, *throttlerdata.UpdateConfigurationRequest) (*throttlerdata.UpdateConfigurationResponse, error)
	ResetConfiguration(context.Context, *throttlerdata.ResetConfigurationRequest) (*throttlerdata.ResetConfigurationResponse, error)
}

type DRPCThrottlerUnimplementedServer struct{}

func (s *DRPCThrottlerUnimplementedServer) MaxRates(context.Context, *throttlerdata.MaxRatesRequest) (*throttlerdata.MaxRatesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCThrottlerUnimplementedServer) SetMaxRate(context.Context, *throttlerdata.SetMaxRateRequest) (*throttlerdata.SetMaxRateResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCThrottlerUnimplementedServer) GetConfiguration(context.Context, *throttlerdata.GetConfigurationRequest) (*throttlerdata.GetConfigurationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCThrottlerUnimplementedServer) UpdateConfiguration(context.Context, *throttlerdata.UpdateConfigurationRequest) (*throttlerdata.UpdateConfigurationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCThrottlerUnimplementedServer) ResetConfiguration(context.Context, *throttlerdata.ResetConfigurationRequest) (*throttlerdata.ResetConfigurationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCThrottlerDescription struct{}

func (DRPCThrottlerDescription) NumMethods() int { return 5 }

func (DRPCThrottlerDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/throttlerservice.Throttler/MaxRates", drpcEncoding_File_throttlerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCThrottlerServer).
					MaxRates(
						ctx,
						in1.(*throttlerdata.MaxRatesRequest),
					)
			}, DRPCThrottlerServer.MaxRates, true
	case 1:
		return "/throttlerservice.Throttler/SetMaxRate", drpcEncoding_File_throttlerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCThrottlerServer).
					SetMaxRate(
						ctx,
						in1.(*throttlerdata.SetMaxRateRequest),
					)
			}, DRPCThrottlerServer.SetMaxRate, true
	case 2:
		return "/throttlerservice.Throttler/GetConfiguration", drpcEncoding_File_throttlerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCThrottlerServer).
					GetConfiguration(
						ctx,
						in1.(*throttlerdata.GetConfigurationRequest),
					)
			}, DRPCThrottlerServer.GetConfiguration, true
	case 3:
		return "/throttlerservice.Throttler/UpdateConfiguration", drpcEncoding_File_throttlerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCThrottlerServer).
					UpdateConfiguration(
						ctx,
						in1.(*throttlerdata.UpdateConfigurationRequest),
					)
			}, DRPCThrottlerServer.UpdateConfiguration, true
	case 4:
		return "/throttlerservice.Throttler/ResetConfiguration", drpcEncoding_File_throttlerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCThrottlerServer).
					ResetConfiguration(
						ctx,
						in1.(*throttlerdata.ResetConfigurationRequest),
					)
			}, DRPCThrottlerServer.ResetConfiguration, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterThrottler(mux drpc.Mux, impl DRPCThrottlerServer) error {
	return mux.Register(impl, DRPCThrottlerDescription{})
}

type DRPCThrottler_MaxRatesStream interface {
	drpc.Stream
	SendAndClose(*throttlerdata.MaxRatesResponse) error
}

type drpcThrottler_MaxRatesStream struct {
	drpc.Stream
}

func (x *drpcThrottler_MaxRatesStream) SendAndClose(m *throttlerdata.MaxRatesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_throttlerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCThrottler_SetMaxRateStream interface {
	drpc.Stream
	SendAndClose(*throttlerdata.SetMaxRateResponse) error
}

type drpcThrottler_SetMaxRateStream struct {
	drpc.Stream
}

func (x *drpcThrottler_SetMaxRateStream) SendAndClose(m *throttlerdata.SetMaxRateResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_throttlerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCThrottler_GetConfigurationStream interface {
	drpc.Stream
	SendAndClose(*throttlerdata.GetConfigurationResponse) error
}

type drpcThrottler_GetConfigurationStream struct {
	drpc.Stream
}

func (x *drpcThrottler_GetConfigurationStream) SendAndClose(m *throttlerdata.GetConfigurationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_throttlerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCThrottler_UpdateConfigurationStream interface {
	drpc.Stream
	SendAndClose(*throttlerdata.UpdateConfigurationResponse) error
}

type drpcThrottler_UpdateConfigurationStream struct {
	drpc.Stream
}

func (x *drpcThrottler_UpdateConfigurationStream) SendAndClose(m *throttlerdata.UpdateConfigurationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_throttlerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCThrottler_ResetConfigurationStream interface {
	drpc.Stream
	SendAndClose(*throttlerdata.ResetConfigurationResponse) error
}

type drpcThrottler_ResetConfigurationStream struct {
	drpc.Stream
}

func (x *drpcThrottler_ResetConfigurationStream) SendAndClose(m *throttlerdata.ResetConfigurationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_throttlerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
