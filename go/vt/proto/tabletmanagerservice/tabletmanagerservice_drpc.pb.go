// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: tabletmanagerservice.proto

package tabletmanagerservice

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	tabletmanagerdata "vitess.io/vitess/go/vt/proto/tabletmanagerdata"
)

type drpcEncoding_File_tabletmanagerservice_proto struct{}

func (drpcEncoding_File_tabletmanagerservice_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_tabletmanagerservice_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_tabletmanagerservice_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_tabletmanagerservice_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCTabletManagerClient interface {
	DRPCConn() drpc.Conn

	Ping(ctx context.Context, in *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error)
	Sleep(ctx context.Context, in *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error)
	ExecuteHook(ctx context.Context, in *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error)
	GetSchema(ctx context.Context, in *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error)
	GetPermissions(ctx context.Context, in *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error)
	SetReadOnly(ctx context.Context, in *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error)
	SetReadWrite(ctx context.Context, in *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error)
	ChangeType(ctx context.Context, in *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error)
	RefreshState(ctx context.Context, in *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error)
	RunHealthCheck(ctx context.Context, in *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error)
	IgnoreHealthError(ctx context.Context, in *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error)
	ReloadSchema(ctx context.Context, in *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error)
	PreflightSchema(ctx context.Context, in *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error)
	ApplySchema(ctx context.Context, in *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error)
	LockTables(ctx context.Context, in *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error)
	UnlockTables(ctx context.Context, in *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error)
	ExecuteQuery(ctx context.Context, in *tabletmanagerdata.ExecuteQueryRequest) (*tabletmanagerdata.ExecuteQueryResponse, error)
	ExecuteFetchAsDba(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsAllPrivs(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error)
	ExecuteFetchAsApp(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error)
	ReplicationStatus(ctx context.Context, in *tabletmanagerdata.ReplicationStatusRequest) (*tabletmanagerdata.ReplicationStatusResponse, error)
	MasterStatus(ctx context.Context, in *tabletmanagerdata.MasterStatusRequest) (*tabletmanagerdata.MasterStatusResponse, error)
	MasterPosition(ctx context.Context, in *tabletmanagerdata.MasterPositionRequest) (*tabletmanagerdata.MasterPositionResponse, error)
	WaitForPosition(ctx context.Context, in *tabletmanagerdata.WaitForPositionRequest) (*tabletmanagerdata.WaitForPositionResponse, error)
	StopReplication(ctx context.Context, in *tabletmanagerdata.StopReplicationRequest) (*tabletmanagerdata.StopReplicationResponse, error)
	StopReplicationMinimum(ctx context.Context, in *tabletmanagerdata.StopReplicationMinimumRequest) (*tabletmanagerdata.StopReplicationMinimumResponse, error)
	StartReplication(ctx context.Context, in *tabletmanagerdata.StartReplicationRequest) (*tabletmanagerdata.StartReplicationResponse, error)
	StartReplicationUntilAfter(ctx context.Context, in *tabletmanagerdata.StartReplicationUntilAfterRequest) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error)
	GetReplicas(ctx context.Context, in *tabletmanagerdata.GetReplicasRequest) (*tabletmanagerdata.GetReplicasResponse, error)
	VReplicationExec(ctx context.Context, in *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error)
	VReplicationWaitForPos(ctx context.Context, in *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error)
	ResetReplication(ctx context.Context, in *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error)
	InitMaster(ctx context.Context, in *tabletmanagerdata.InitMasterRequest) (*tabletmanagerdata.InitMasterResponse, error)
	PopulateReparentJournal(ctx context.Context, in *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error)
	InitReplica(ctx context.Context, in *tabletmanagerdata.InitReplicaRequest) (*tabletmanagerdata.InitReplicaResponse, error)
	DemoteMaster(ctx context.Context, in *tabletmanagerdata.DemoteMasterRequest) (*tabletmanagerdata.DemoteMasterResponse, error)
	UndoDemoteMaster(ctx context.Context, in *tabletmanagerdata.UndoDemoteMasterRequest) (*tabletmanagerdata.UndoDemoteMasterResponse, error)
	ReplicaWasPromoted(ctx context.Context, in *tabletmanagerdata.ReplicaWasPromotedRequest) (*tabletmanagerdata.ReplicaWasPromotedResponse, error)
	SetMaster(ctx context.Context, in *tabletmanagerdata.SetMasterRequest) (*tabletmanagerdata.SetMasterResponse, error)
	ReplicaWasRestarted(ctx context.Context, in *tabletmanagerdata.ReplicaWasRestartedRequest) (*tabletmanagerdata.ReplicaWasRestartedResponse, error)
	StopReplicationAndGetStatus(ctx context.Context, in *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error)
	PromoteReplica(ctx context.Context, in *tabletmanagerdata.PromoteReplicaRequest) (*tabletmanagerdata.PromoteReplicaResponse, error)
	Backup(ctx context.Context, in *tabletmanagerdata.BackupRequest) (DRPCTabletManager_BackupClient, error)
	RestoreFromBackup(ctx context.Context, in *tabletmanagerdata.RestoreFromBackupRequest) (DRPCTabletManager_RestoreFromBackupClient, error)
	VExec(ctx context.Context, in *tabletmanagerdata.VExecRequest) (*tabletmanagerdata.VExecResponse, error)
}

type drpcTabletManagerClient struct {
	cc drpc.Conn
}

func NewDRPCTabletManagerClient(cc drpc.Conn) DRPCTabletManagerClient {
	return &drpcTabletManagerClient{cc}
}

func (c *drpcTabletManagerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcTabletManagerClient) Ping(ctx context.Context, in *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error) {
	out := new(tabletmanagerdata.PingResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Ping", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) Sleep(ctx context.Context, in *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error) {
	out := new(tabletmanagerdata.SleepResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/Sleep", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ExecuteHook(ctx context.Context, in *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error) {
	out := new(tabletmanagerdata.ExecuteHookResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteHook", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) GetSchema(ctx context.Context, in *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error) {
	out := new(tabletmanagerdata.GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetSchema", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) GetPermissions(ctx context.Context, in *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error) {
	out := new(tabletmanagerdata.GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetPermissions", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) SetReadOnly(ctx context.Context, in *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error) {
	out := new(tabletmanagerdata.SetReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadOnly", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) SetReadWrite(ctx context.Context, in *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error) {
	out := new(tabletmanagerdata.SetReadWriteResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetReadWrite", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ChangeType(ctx context.Context, in *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error) {
	out := new(tabletmanagerdata.ChangeTypeResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ChangeType", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) RefreshState(ctx context.Context, in *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error) {
	out := new(tabletmanagerdata.RefreshStateResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RefreshState", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) RunHealthCheck(ctx context.Context, in *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error) {
	out := new(tabletmanagerdata.RunHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/RunHealthCheck", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) IgnoreHealthError(ctx context.Context, in *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error) {
	out := new(tabletmanagerdata.IgnoreHealthErrorResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/IgnoreHealthError", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ReloadSchema(ctx context.Context, in *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error) {
	out := new(tabletmanagerdata.ReloadSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReloadSchema", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) PreflightSchema(ctx context.Context, in *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error) {
	out := new(tabletmanagerdata.PreflightSchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PreflightSchema", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ApplySchema(ctx context.Context, in *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error) {
	out := new(tabletmanagerdata.ApplySchemaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ApplySchema", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) LockTables(ctx context.Context, in *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error) {
	out := new(tabletmanagerdata.LockTablesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/LockTables", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) UnlockTables(ctx context.Context, in *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error) {
	out := new(tabletmanagerdata.UnlockTablesResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/UnlockTables", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ExecuteQuery(ctx context.Context, in *tabletmanagerdata.ExecuteQueryRequest) (*tabletmanagerdata.ExecuteQueryResponse, error) {
	out := new(tabletmanagerdata.ExecuteQueryResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteQuery", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ExecuteFetchAsDba(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsDbaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ExecuteFetchAsAllPrivs(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsAllPrivsResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ExecuteFetchAsApp(ctx context.Context, in *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error) {
	out := new(tabletmanagerdata.ExecuteFetchAsAppResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ReplicationStatus(ctx context.Context, in *tabletmanagerdata.ReplicationStatusRequest) (*tabletmanagerdata.ReplicationStatusResponse, error) {
	out := new(tabletmanagerdata.ReplicationStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReplicationStatus", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) MasterStatus(ctx context.Context, in *tabletmanagerdata.MasterStatusRequest) (*tabletmanagerdata.MasterStatusResponse, error) {
	out := new(tabletmanagerdata.MasterStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/MasterStatus", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) MasterPosition(ctx context.Context, in *tabletmanagerdata.MasterPositionRequest) (*tabletmanagerdata.MasterPositionResponse, error) {
	out := new(tabletmanagerdata.MasterPositionResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/MasterPosition", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) WaitForPosition(ctx context.Context, in *tabletmanagerdata.WaitForPositionRequest) (*tabletmanagerdata.WaitForPositionResponse, error) {
	out := new(tabletmanagerdata.WaitForPositionResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/WaitForPosition", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) StopReplication(ctx context.Context, in *tabletmanagerdata.StopReplicationRequest) (*tabletmanagerdata.StopReplicationResponse, error) {
	out := new(tabletmanagerdata.StopReplicationResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplication", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) StopReplicationMinimum(ctx context.Context, in *tabletmanagerdata.StopReplicationMinimumRequest) (*tabletmanagerdata.StopReplicationMinimumResponse, error) {
	out := new(tabletmanagerdata.StopReplicationMinimumResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplicationMinimum", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) StartReplication(ctx context.Context, in *tabletmanagerdata.StartReplicationRequest) (*tabletmanagerdata.StartReplicationResponse, error) {
	out := new(tabletmanagerdata.StartReplicationResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartReplication", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) StartReplicationUntilAfter(ctx context.Context, in *tabletmanagerdata.StartReplicationUntilAfterRequest) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error) {
	out := new(tabletmanagerdata.StartReplicationUntilAfterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StartReplicationUntilAfter", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) GetReplicas(ctx context.Context, in *tabletmanagerdata.GetReplicasRequest) (*tabletmanagerdata.GetReplicasResponse, error) {
	out := new(tabletmanagerdata.GetReplicasResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/GetReplicas", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) VReplicationExec(ctx context.Context, in *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error) {
	out := new(tabletmanagerdata.VReplicationExecResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/VReplicationExec", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) VReplicationWaitForPos(ctx context.Context, in *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error) {
	out := new(tabletmanagerdata.VReplicationWaitForPosResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/VReplicationWaitForPos", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ResetReplication(ctx context.Context, in *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error) {
	out := new(tabletmanagerdata.ResetReplicationResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ResetReplication", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) InitMaster(ctx context.Context, in *tabletmanagerdata.InitMasterRequest) (*tabletmanagerdata.InitMasterResponse, error) {
	out := new(tabletmanagerdata.InitMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitMaster", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) PopulateReparentJournal(ctx context.Context, in *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error) {
	out := new(tabletmanagerdata.PopulateReparentJournalResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PopulateReparentJournal", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) InitReplica(ctx context.Context, in *tabletmanagerdata.InitReplicaRequest) (*tabletmanagerdata.InitReplicaResponse, error) {
	out := new(tabletmanagerdata.InitReplicaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/InitReplica", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) DemoteMaster(ctx context.Context, in *tabletmanagerdata.DemoteMasterRequest) (*tabletmanagerdata.DemoteMasterResponse, error) {
	out := new(tabletmanagerdata.DemoteMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/DemoteMaster", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) UndoDemoteMaster(ctx context.Context, in *tabletmanagerdata.UndoDemoteMasterRequest) (*tabletmanagerdata.UndoDemoteMasterResponse, error) {
	out := new(tabletmanagerdata.UndoDemoteMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/UndoDemoteMaster", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ReplicaWasPromoted(ctx context.Context, in *tabletmanagerdata.ReplicaWasPromotedRequest) (*tabletmanagerdata.ReplicaWasPromotedResponse, error) {
	out := new(tabletmanagerdata.ReplicaWasPromotedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReplicaWasPromoted", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) SetMaster(ctx context.Context, in *tabletmanagerdata.SetMasterRequest) (*tabletmanagerdata.SetMasterResponse, error) {
	out := new(tabletmanagerdata.SetMasterResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/SetMaster", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) ReplicaWasRestarted(ctx context.Context, in *tabletmanagerdata.ReplicaWasRestartedRequest) (*tabletmanagerdata.ReplicaWasRestartedResponse, error) {
	out := new(tabletmanagerdata.ReplicaWasRestartedResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/ReplicaWasRestarted", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) StopReplicationAndGetStatus(ctx context.Context, in *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error) {
	out := new(tabletmanagerdata.StopReplicationAndGetStatusResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) PromoteReplica(ctx context.Context, in *tabletmanagerdata.PromoteReplicaRequest) (*tabletmanagerdata.PromoteReplicaResponse, error) {
	out := new(tabletmanagerdata.PromoteReplicaResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/PromoteReplica", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcTabletManagerClient) Backup(ctx context.Context, in *tabletmanagerdata.BackupRequest) (DRPCTabletManager_BackupClient, error) {
	stream, err := c.cc.NewStream(ctx, "/tabletmanagerservice.TabletManager/Backup", drpcEncoding_File_tabletmanagerservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTabletManager_BackupClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTabletManager_BackupClient interface {
	drpc.Stream
	Recv() (*tabletmanagerdata.BackupResponse, error)
}

type drpcTabletManager_BackupClient struct {
	drpc.Stream
}

func (x *drpcTabletManager_BackupClient) Recv() (*tabletmanagerdata.BackupResponse, error) {
	m := new(tabletmanagerdata.BackupResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcTabletManagerClient) RestoreFromBackup(ctx context.Context, in *tabletmanagerdata.RestoreFromBackupRequest) (DRPCTabletManager_RestoreFromBackupClient, error) {
	stream, err := c.cc.NewStream(ctx, "/tabletmanagerservice.TabletManager/RestoreFromBackup", drpcEncoding_File_tabletmanagerservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcTabletManager_RestoreFromBackupClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCTabletManager_RestoreFromBackupClient interface {
	drpc.Stream
	Recv() (*tabletmanagerdata.RestoreFromBackupResponse, error)
}

type drpcTabletManager_RestoreFromBackupClient struct {
	drpc.Stream
}

func (x *drpcTabletManager_RestoreFromBackupClient) Recv() (*tabletmanagerdata.RestoreFromBackupResponse, error) {
	m := new(tabletmanagerdata.RestoreFromBackupResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcTabletManagerClient) VExec(ctx context.Context, in *tabletmanagerdata.VExecRequest) (*tabletmanagerdata.VExecResponse, error) {
	out := new(tabletmanagerdata.VExecResponse)
	err := c.cc.Invoke(ctx, "/tabletmanagerservice.TabletManager/VExec", drpcEncoding_File_tabletmanagerservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCTabletManagerServer interface {
	Ping(context.Context, *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error)
	Sleep(context.Context, *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error)
	ExecuteHook(context.Context, *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error)
	GetSchema(context.Context, *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error)
	GetPermissions(context.Context, *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error)
	SetReadOnly(context.Context, *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error)
	SetReadWrite(context.Context, *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error)
	ChangeType(context.Context, *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error)
	RefreshState(context.Context, *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error)
	RunHealthCheck(context.Context, *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error)
	IgnoreHealthError(context.Context, *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error)
	ReloadSchema(context.Context, *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error)
	PreflightSchema(context.Context, *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error)
	ApplySchema(context.Context, *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error)
	LockTables(context.Context, *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error)
	UnlockTables(context.Context, *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error)
	ExecuteQuery(context.Context, *tabletmanagerdata.ExecuteQueryRequest) (*tabletmanagerdata.ExecuteQueryResponse, error)
	ExecuteFetchAsDba(context.Context, *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error)
	ExecuteFetchAsAllPrivs(context.Context, *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error)
	ExecuteFetchAsApp(context.Context, *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error)
	ReplicationStatus(context.Context, *tabletmanagerdata.ReplicationStatusRequest) (*tabletmanagerdata.ReplicationStatusResponse, error)
	MasterStatus(context.Context, *tabletmanagerdata.MasterStatusRequest) (*tabletmanagerdata.MasterStatusResponse, error)
	MasterPosition(context.Context, *tabletmanagerdata.MasterPositionRequest) (*tabletmanagerdata.MasterPositionResponse, error)
	WaitForPosition(context.Context, *tabletmanagerdata.WaitForPositionRequest) (*tabletmanagerdata.WaitForPositionResponse, error)
	StopReplication(context.Context, *tabletmanagerdata.StopReplicationRequest) (*tabletmanagerdata.StopReplicationResponse, error)
	StopReplicationMinimum(context.Context, *tabletmanagerdata.StopReplicationMinimumRequest) (*tabletmanagerdata.StopReplicationMinimumResponse, error)
	StartReplication(context.Context, *tabletmanagerdata.StartReplicationRequest) (*tabletmanagerdata.StartReplicationResponse, error)
	StartReplicationUntilAfter(context.Context, *tabletmanagerdata.StartReplicationUntilAfterRequest) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error)
	GetReplicas(context.Context, *tabletmanagerdata.GetReplicasRequest) (*tabletmanagerdata.GetReplicasResponse, error)
	VReplicationExec(context.Context, *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error)
	VReplicationWaitForPos(context.Context, *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error)
	ResetReplication(context.Context, *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error)
	InitMaster(context.Context, *tabletmanagerdata.InitMasterRequest) (*tabletmanagerdata.InitMasterResponse, error)
	PopulateReparentJournal(context.Context, *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error)
	InitReplica(context.Context, *tabletmanagerdata.InitReplicaRequest) (*tabletmanagerdata.InitReplicaResponse, error)
	DemoteMaster(context.Context, *tabletmanagerdata.DemoteMasterRequest) (*tabletmanagerdata.DemoteMasterResponse, error)
	UndoDemoteMaster(context.Context, *tabletmanagerdata.UndoDemoteMasterRequest) (*tabletmanagerdata.UndoDemoteMasterResponse, error)
	ReplicaWasPromoted(context.Context, *tabletmanagerdata.ReplicaWasPromotedRequest) (*tabletmanagerdata.ReplicaWasPromotedResponse, error)
	SetMaster(context.Context, *tabletmanagerdata.SetMasterRequest) (*tabletmanagerdata.SetMasterResponse, error)
	ReplicaWasRestarted(context.Context, *tabletmanagerdata.ReplicaWasRestartedRequest) (*tabletmanagerdata.ReplicaWasRestartedResponse, error)
	StopReplicationAndGetStatus(context.Context, *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error)
	PromoteReplica(context.Context, *tabletmanagerdata.PromoteReplicaRequest) (*tabletmanagerdata.PromoteReplicaResponse, error)
	Backup(*tabletmanagerdata.BackupRequest, DRPCTabletManager_BackupStream) error
	RestoreFromBackup(*tabletmanagerdata.RestoreFromBackupRequest, DRPCTabletManager_RestoreFromBackupStream) error
	VExec(context.Context, *tabletmanagerdata.VExecRequest) (*tabletmanagerdata.VExecResponse, error)
}

type DRPCTabletManagerUnimplementedServer struct{}

func (s *DRPCTabletManagerUnimplementedServer) Ping(context.Context, *tabletmanagerdata.PingRequest) (*tabletmanagerdata.PingResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) Sleep(context.Context, *tabletmanagerdata.SleepRequest) (*tabletmanagerdata.SleepResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ExecuteHook(context.Context, *tabletmanagerdata.ExecuteHookRequest) (*tabletmanagerdata.ExecuteHookResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) GetSchema(context.Context, *tabletmanagerdata.GetSchemaRequest) (*tabletmanagerdata.GetSchemaResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) GetPermissions(context.Context, *tabletmanagerdata.GetPermissionsRequest) (*tabletmanagerdata.GetPermissionsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) SetReadOnly(context.Context, *tabletmanagerdata.SetReadOnlyRequest) (*tabletmanagerdata.SetReadOnlyResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) SetReadWrite(context.Context, *tabletmanagerdata.SetReadWriteRequest) (*tabletmanagerdata.SetReadWriteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ChangeType(context.Context, *tabletmanagerdata.ChangeTypeRequest) (*tabletmanagerdata.ChangeTypeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) RefreshState(context.Context, *tabletmanagerdata.RefreshStateRequest) (*tabletmanagerdata.RefreshStateResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) RunHealthCheck(context.Context, *tabletmanagerdata.RunHealthCheckRequest) (*tabletmanagerdata.RunHealthCheckResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) IgnoreHealthError(context.Context, *tabletmanagerdata.IgnoreHealthErrorRequest) (*tabletmanagerdata.IgnoreHealthErrorResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ReloadSchema(context.Context, *tabletmanagerdata.ReloadSchemaRequest) (*tabletmanagerdata.ReloadSchemaResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) PreflightSchema(context.Context, *tabletmanagerdata.PreflightSchemaRequest) (*tabletmanagerdata.PreflightSchemaResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ApplySchema(context.Context, *tabletmanagerdata.ApplySchemaRequest) (*tabletmanagerdata.ApplySchemaResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) LockTables(context.Context, *tabletmanagerdata.LockTablesRequest) (*tabletmanagerdata.LockTablesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) UnlockTables(context.Context, *tabletmanagerdata.UnlockTablesRequest) (*tabletmanagerdata.UnlockTablesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ExecuteQuery(context.Context, *tabletmanagerdata.ExecuteQueryRequest) (*tabletmanagerdata.ExecuteQueryResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ExecuteFetchAsDba(context.Context, *tabletmanagerdata.ExecuteFetchAsDbaRequest) (*tabletmanagerdata.ExecuteFetchAsDbaResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ExecuteFetchAsAllPrivs(context.Context, *tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) (*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ExecuteFetchAsApp(context.Context, *tabletmanagerdata.ExecuteFetchAsAppRequest) (*tabletmanagerdata.ExecuteFetchAsAppResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ReplicationStatus(context.Context, *tabletmanagerdata.ReplicationStatusRequest) (*tabletmanagerdata.ReplicationStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) MasterStatus(context.Context, *tabletmanagerdata.MasterStatusRequest) (*tabletmanagerdata.MasterStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) MasterPosition(context.Context, *tabletmanagerdata.MasterPositionRequest) (*tabletmanagerdata.MasterPositionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) WaitForPosition(context.Context, *tabletmanagerdata.WaitForPositionRequest) (*tabletmanagerdata.WaitForPositionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) StopReplication(context.Context, *tabletmanagerdata.StopReplicationRequest) (*tabletmanagerdata.StopReplicationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) StopReplicationMinimum(context.Context, *tabletmanagerdata.StopReplicationMinimumRequest) (*tabletmanagerdata.StopReplicationMinimumResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) StartReplication(context.Context, *tabletmanagerdata.StartReplicationRequest) (*tabletmanagerdata.StartReplicationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) StartReplicationUntilAfter(context.Context, *tabletmanagerdata.StartReplicationUntilAfterRequest) (*tabletmanagerdata.StartReplicationUntilAfterResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) GetReplicas(context.Context, *tabletmanagerdata.GetReplicasRequest) (*tabletmanagerdata.GetReplicasResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) VReplicationExec(context.Context, *tabletmanagerdata.VReplicationExecRequest) (*tabletmanagerdata.VReplicationExecResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) VReplicationWaitForPos(context.Context, *tabletmanagerdata.VReplicationWaitForPosRequest) (*tabletmanagerdata.VReplicationWaitForPosResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ResetReplication(context.Context, *tabletmanagerdata.ResetReplicationRequest) (*tabletmanagerdata.ResetReplicationResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) InitMaster(context.Context, *tabletmanagerdata.InitMasterRequest) (*tabletmanagerdata.InitMasterResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) PopulateReparentJournal(context.Context, *tabletmanagerdata.PopulateReparentJournalRequest) (*tabletmanagerdata.PopulateReparentJournalResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) InitReplica(context.Context, *tabletmanagerdata.InitReplicaRequest) (*tabletmanagerdata.InitReplicaResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) DemoteMaster(context.Context, *tabletmanagerdata.DemoteMasterRequest) (*tabletmanagerdata.DemoteMasterResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) UndoDemoteMaster(context.Context, *tabletmanagerdata.UndoDemoteMasterRequest) (*tabletmanagerdata.UndoDemoteMasterResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ReplicaWasPromoted(context.Context, *tabletmanagerdata.ReplicaWasPromotedRequest) (*tabletmanagerdata.ReplicaWasPromotedResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) SetMaster(context.Context, *tabletmanagerdata.SetMasterRequest) (*tabletmanagerdata.SetMasterResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) ReplicaWasRestarted(context.Context, *tabletmanagerdata.ReplicaWasRestartedRequest) (*tabletmanagerdata.ReplicaWasRestartedResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) StopReplicationAndGetStatus(context.Context, *tabletmanagerdata.StopReplicationAndGetStatusRequest) (*tabletmanagerdata.StopReplicationAndGetStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) PromoteReplica(context.Context, *tabletmanagerdata.PromoteReplicaRequest) (*tabletmanagerdata.PromoteReplicaResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) Backup(*tabletmanagerdata.BackupRequest, DRPCTabletManager_BackupStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) RestoreFromBackup(*tabletmanagerdata.RestoreFromBackupRequest, DRPCTabletManager_RestoreFromBackupStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCTabletManagerUnimplementedServer) VExec(context.Context, *tabletmanagerdata.VExecRequest) (*tabletmanagerdata.VExecResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCTabletManagerDescription struct{}

func (DRPCTabletManagerDescription) NumMethods() int { return 45 }

func (DRPCTabletManagerDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/tabletmanagerservice.TabletManager/Ping", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					Ping(
						ctx,
						in1.(*tabletmanagerdata.PingRequest),
					)
			}, DRPCTabletManagerServer.Ping, true
	case 1:
		return "/tabletmanagerservice.TabletManager/Sleep", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					Sleep(
						ctx,
						in1.(*tabletmanagerdata.SleepRequest),
					)
			}, DRPCTabletManagerServer.Sleep, true
	case 2:
		return "/tabletmanagerservice.TabletManager/ExecuteHook", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ExecuteHook(
						ctx,
						in1.(*tabletmanagerdata.ExecuteHookRequest),
					)
			}, DRPCTabletManagerServer.ExecuteHook, true
	case 3:
		return "/tabletmanagerservice.TabletManager/GetSchema", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					GetSchema(
						ctx,
						in1.(*tabletmanagerdata.GetSchemaRequest),
					)
			}, DRPCTabletManagerServer.GetSchema, true
	case 4:
		return "/tabletmanagerservice.TabletManager/GetPermissions", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					GetPermissions(
						ctx,
						in1.(*tabletmanagerdata.GetPermissionsRequest),
					)
			}, DRPCTabletManagerServer.GetPermissions, true
	case 5:
		return "/tabletmanagerservice.TabletManager/SetReadOnly", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					SetReadOnly(
						ctx,
						in1.(*tabletmanagerdata.SetReadOnlyRequest),
					)
			}, DRPCTabletManagerServer.SetReadOnly, true
	case 6:
		return "/tabletmanagerservice.TabletManager/SetReadWrite", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					SetReadWrite(
						ctx,
						in1.(*tabletmanagerdata.SetReadWriteRequest),
					)
			}, DRPCTabletManagerServer.SetReadWrite, true
	case 7:
		return "/tabletmanagerservice.TabletManager/ChangeType", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ChangeType(
						ctx,
						in1.(*tabletmanagerdata.ChangeTypeRequest),
					)
			}, DRPCTabletManagerServer.ChangeType, true
	case 8:
		return "/tabletmanagerservice.TabletManager/RefreshState", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					RefreshState(
						ctx,
						in1.(*tabletmanagerdata.RefreshStateRequest),
					)
			}, DRPCTabletManagerServer.RefreshState, true
	case 9:
		return "/tabletmanagerservice.TabletManager/RunHealthCheck", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					RunHealthCheck(
						ctx,
						in1.(*tabletmanagerdata.RunHealthCheckRequest),
					)
			}, DRPCTabletManagerServer.RunHealthCheck, true
	case 10:
		return "/tabletmanagerservice.TabletManager/IgnoreHealthError", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					IgnoreHealthError(
						ctx,
						in1.(*tabletmanagerdata.IgnoreHealthErrorRequest),
					)
			}, DRPCTabletManagerServer.IgnoreHealthError, true
	case 11:
		return "/tabletmanagerservice.TabletManager/ReloadSchema", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ReloadSchema(
						ctx,
						in1.(*tabletmanagerdata.ReloadSchemaRequest),
					)
			}, DRPCTabletManagerServer.ReloadSchema, true
	case 12:
		return "/tabletmanagerservice.TabletManager/PreflightSchema", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					PreflightSchema(
						ctx,
						in1.(*tabletmanagerdata.PreflightSchemaRequest),
					)
			}, DRPCTabletManagerServer.PreflightSchema, true
	case 13:
		return "/tabletmanagerservice.TabletManager/ApplySchema", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ApplySchema(
						ctx,
						in1.(*tabletmanagerdata.ApplySchemaRequest),
					)
			}, DRPCTabletManagerServer.ApplySchema, true
	case 14:
		return "/tabletmanagerservice.TabletManager/LockTables", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					LockTables(
						ctx,
						in1.(*tabletmanagerdata.LockTablesRequest),
					)
			}, DRPCTabletManagerServer.LockTables, true
	case 15:
		return "/tabletmanagerservice.TabletManager/UnlockTables", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					UnlockTables(
						ctx,
						in1.(*tabletmanagerdata.UnlockTablesRequest),
					)
			}, DRPCTabletManagerServer.UnlockTables, true
	case 16:
		return "/tabletmanagerservice.TabletManager/ExecuteQuery", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ExecuteQuery(
						ctx,
						in1.(*tabletmanagerdata.ExecuteQueryRequest),
					)
			}, DRPCTabletManagerServer.ExecuteQuery, true
	case 17:
		return "/tabletmanagerservice.TabletManager/ExecuteFetchAsDba", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ExecuteFetchAsDba(
						ctx,
						in1.(*tabletmanagerdata.ExecuteFetchAsDbaRequest),
					)
			}, DRPCTabletManagerServer.ExecuteFetchAsDba, true
	case 18:
		return "/tabletmanagerservice.TabletManager/ExecuteFetchAsAllPrivs", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ExecuteFetchAsAllPrivs(
						ctx,
						in1.(*tabletmanagerdata.ExecuteFetchAsAllPrivsRequest),
					)
			}, DRPCTabletManagerServer.ExecuteFetchAsAllPrivs, true
	case 19:
		return "/tabletmanagerservice.TabletManager/ExecuteFetchAsApp", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ExecuteFetchAsApp(
						ctx,
						in1.(*tabletmanagerdata.ExecuteFetchAsAppRequest),
					)
			}, DRPCTabletManagerServer.ExecuteFetchAsApp, true
	case 20:
		return "/tabletmanagerservice.TabletManager/ReplicationStatus", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ReplicationStatus(
						ctx,
						in1.(*tabletmanagerdata.ReplicationStatusRequest),
					)
			}, DRPCTabletManagerServer.ReplicationStatus, true
	case 21:
		return "/tabletmanagerservice.TabletManager/MasterStatus", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					MasterStatus(
						ctx,
						in1.(*tabletmanagerdata.MasterStatusRequest),
					)
			}, DRPCTabletManagerServer.MasterStatus, true
	case 22:
		return "/tabletmanagerservice.TabletManager/MasterPosition", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					MasterPosition(
						ctx,
						in1.(*tabletmanagerdata.MasterPositionRequest),
					)
			}, DRPCTabletManagerServer.MasterPosition, true
	case 23:
		return "/tabletmanagerservice.TabletManager/WaitForPosition", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					WaitForPosition(
						ctx,
						in1.(*tabletmanagerdata.WaitForPositionRequest),
					)
			}, DRPCTabletManagerServer.WaitForPosition, true
	case 24:
		return "/tabletmanagerservice.TabletManager/StopReplication", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					StopReplication(
						ctx,
						in1.(*tabletmanagerdata.StopReplicationRequest),
					)
			}, DRPCTabletManagerServer.StopReplication, true
	case 25:
		return "/tabletmanagerservice.TabletManager/StopReplicationMinimum", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					StopReplicationMinimum(
						ctx,
						in1.(*tabletmanagerdata.StopReplicationMinimumRequest),
					)
			}, DRPCTabletManagerServer.StopReplicationMinimum, true
	case 26:
		return "/tabletmanagerservice.TabletManager/StartReplication", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					StartReplication(
						ctx,
						in1.(*tabletmanagerdata.StartReplicationRequest),
					)
			}, DRPCTabletManagerServer.StartReplication, true
	case 27:
		return "/tabletmanagerservice.TabletManager/StartReplicationUntilAfter", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					StartReplicationUntilAfter(
						ctx,
						in1.(*tabletmanagerdata.StartReplicationUntilAfterRequest),
					)
			}, DRPCTabletManagerServer.StartReplicationUntilAfter, true
	case 28:
		return "/tabletmanagerservice.TabletManager/GetReplicas", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					GetReplicas(
						ctx,
						in1.(*tabletmanagerdata.GetReplicasRequest),
					)
			}, DRPCTabletManagerServer.GetReplicas, true
	case 29:
		return "/tabletmanagerservice.TabletManager/VReplicationExec", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					VReplicationExec(
						ctx,
						in1.(*tabletmanagerdata.VReplicationExecRequest),
					)
			}, DRPCTabletManagerServer.VReplicationExec, true
	case 30:
		return "/tabletmanagerservice.TabletManager/VReplicationWaitForPos", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					VReplicationWaitForPos(
						ctx,
						in1.(*tabletmanagerdata.VReplicationWaitForPosRequest),
					)
			}, DRPCTabletManagerServer.VReplicationWaitForPos, true
	case 31:
		return "/tabletmanagerservice.TabletManager/ResetReplication", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ResetReplication(
						ctx,
						in1.(*tabletmanagerdata.ResetReplicationRequest),
					)
			}, DRPCTabletManagerServer.ResetReplication, true
	case 32:
		return "/tabletmanagerservice.TabletManager/InitMaster", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					InitMaster(
						ctx,
						in1.(*tabletmanagerdata.InitMasterRequest),
					)
			}, DRPCTabletManagerServer.InitMaster, true
	case 33:
		return "/tabletmanagerservice.TabletManager/PopulateReparentJournal", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					PopulateReparentJournal(
						ctx,
						in1.(*tabletmanagerdata.PopulateReparentJournalRequest),
					)
			}, DRPCTabletManagerServer.PopulateReparentJournal, true
	case 34:
		return "/tabletmanagerservice.TabletManager/InitReplica", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					InitReplica(
						ctx,
						in1.(*tabletmanagerdata.InitReplicaRequest),
					)
			}, DRPCTabletManagerServer.InitReplica, true
	case 35:
		return "/tabletmanagerservice.TabletManager/DemoteMaster", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					DemoteMaster(
						ctx,
						in1.(*tabletmanagerdata.DemoteMasterRequest),
					)
			}, DRPCTabletManagerServer.DemoteMaster, true
	case 36:
		return "/tabletmanagerservice.TabletManager/UndoDemoteMaster", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					UndoDemoteMaster(
						ctx,
						in1.(*tabletmanagerdata.UndoDemoteMasterRequest),
					)
			}, DRPCTabletManagerServer.UndoDemoteMaster, true
	case 37:
		return "/tabletmanagerservice.TabletManager/ReplicaWasPromoted", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ReplicaWasPromoted(
						ctx,
						in1.(*tabletmanagerdata.ReplicaWasPromotedRequest),
					)
			}, DRPCTabletManagerServer.ReplicaWasPromoted, true
	case 38:
		return "/tabletmanagerservice.TabletManager/SetMaster", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					SetMaster(
						ctx,
						in1.(*tabletmanagerdata.SetMasterRequest),
					)
			}, DRPCTabletManagerServer.SetMaster, true
	case 39:
		return "/tabletmanagerservice.TabletManager/ReplicaWasRestarted", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					ReplicaWasRestarted(
						ctx,
						in1.(*tabletmanagerdata.ReplicaWasRestartedRequest),
					)
			}, DRPCTabletManagerServer.ReplicaWasRestarted, true
	case 40:
		return "/tabletmanagerservice.TabletManager/StopReplicationAndGetStatus", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					StopReplicationAndGetStatus(
						ctx,
						in1.(*tabletmanagerdata.StopReplicationAndGetStatusRequest),
					)
			}, DRPCTabletManagerServer.StopReplicationAndGetStatus, true
	case 41:
		return "/tabletmanagerservice.TabletManager/PromoteReplica", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					PromoteReplica(
						ctx,
						in1.(*tabletmanagerdata.PromoteReplicaRequest),
					)
			}, DRPCTabletManagerServer.PromoteReplica, true
	case 42:
		return "/tabletmanagerservice.TabletManager/Backup", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTabletManagerServer).
					Backup(
						in1.(*tabletmanagerdata.BackupRequest),
						&drpcTabletManager_BackupStream{in2.(drpc.Stream)},
					)
			}, DRPCTabletManagerServer.Backup, true
	case 43:
		return "/tabletmanagerservice.TabletManager/RestoreFromBackup", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCTabletManagerServer).
					RestoreFromBackup(
						in1.(*tabletmanagerdata.RestoreFromBackupRequest),
						&drpcTabletManager_RestoreFromBackupStream{in2.(drpc.Stream)},
					)
			}, DRPCTabletManagerServer.RestoreFromBackup, true
	case 44:
		return "/tabletmanagerservice.TabletManager/VExec", drpcEncoding_File_tabletmanagerservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCTabletManagerServer).
					VExec(
						ctx,
						in1.(*tabletmanagerdata.VExecRequest),
					)
			}, DRPCTabletManagerServer.VExec, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterTabletManager(mux drpc.Mux, impl DRPCTabletManagerServer) error {
	return mux.Register(impl, DRPCTabletManagerDescription{})
}

type DRPCTabletManager_PingStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.PingResponse) error
}

type drpcTabletManager_PingStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_PingStream) SendAndClose(m *tabletmanagerdata.PingResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_SleepStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.SleepResponse) error
}

type drpcTabletManager_SleepStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_SleepStream) SendAndClose(m *tabletmanagerdata.SleepResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ExecuteHookStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ExecuteHookResponse) error
}

type drpcTabletManager_ExecuteHookStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ExecuteHookStream) SendAndClose(m *tabletmanagerdata.ExecuteHookResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_GetSchemaStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.GetSchemaResponse) error
}

type drpcTabletManager_GetSchemaStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_GetSchemaStream) SendAndClose(m *tabletmanagerdata.GetSchemaResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_GetPermissionsStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.GetPermissionsResponse) error
}

type drpcTabletManager_GetPermissionsStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_GetPermissionsStream) SendAndClose(m *tabletmanagerdata.GetPermissionsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_SetReadOnlyStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.SetReadOnlyResponse) error
}

type drpcTabletManager_SetReadOnlyStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_SetReadOnlyStream) SendAndClose(m *tabletmanagerdata.SetReadOnlyResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_SetReadWriteStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.SetReadWriteResponse) error
}

type drpcTabletManager_SetReadWriteStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_SetReadWriteStream) SendAndClose(m *tabletmanagerdata.SetReadWriteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ChangeTypeStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ChangeTypeResponse) error
}

type drpcTabletManager_ChangeTypeStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ChangeTypeStream) SendAndClose(m *tabletmanagerdata.ChangeTypeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_RefreshStateStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.RefreshStateResponse) error
}

type drpcTabletManager_RefreshStateStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_RefreshStateStream) SendAndClose(m *tabletmanagerdata.RefreshStateResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_RunHealthCheckStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.RunHealthCheckResponse) error
}

type drpcTabletManager_RunHealthCheckStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_RunHealthCheckStream) SendAndClose(m *tabletmanagerdata.RunHealthCheckResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_IgnoreHealthErrorStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.IgnoreHealthErrorResponse) error
}

type drpcTabletManager_IgnoreHealthErrorStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_IgnoreHealthErrorStream) SendAndClose(m *tabletmanagerdata.IgnoreHealthErrorResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ReloadSchemaStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ReloadSchemaResponse) error
}

type drpcTabletManager_ReloadSchemaStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ReloadSchemaStream) SendAndClose(m *tabletmanagerdata.ReloadSchemaResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_PreflightSchemaStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.PreflightSchemaResponse) error
}

type drpcTabletManager_PreflightSchemaStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_PreflightSchemaStream) SendAndClose(m *tabletmanagerdata.PreflightSchemaResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ApplySchemaStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ApplySchemaResponse) error
}

type drpcTabletManager_ApplySchemaStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ApplySchemaStream) SendAndClose(m *tabletmanagerdata.ApplySchemaResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_LockTablesStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.LockTablesResponse) error
}

type drpcTabletManager_LockTablesStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_LockTablesStream) SendAndClose(m *tabletmanagerdata.LockTablesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_UnlockTablesStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.UnlockTablesResponse) error
}

type drpcTabletManager_UnlockTablesStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_UnlockTablesStream) SendAndClose(m *tabletmanagerdata.UnlockTablesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ExecuteQueryStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ExecuteQueryResponse) error
}

type drpcTabletManager_ExecuteQueryStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ExecuteQueryStream) SendAndClose(m *tabletmanagerdata.ExecuteQueryResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ExecuteFetchAsDbaStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ExecuteFetchAsDbaResponse) error
}

type drpcTabletManager_ExecuteFetchAsDbaStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ExecuteFetchAsDbaStream) SendAndClose(m *tabletmanagerdata.ExecuteFetchAsDbaResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ExecuteFetchAsAllPrivsStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ExecuteFetchAsAllPrivsResponse) error
}

type drpcTabletManager_ExecuteFetchAsAllPrivsStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ExecuteFetchAsAllPrivsStream) SendAndClose(m *tabletmanagerdata.ExecuteFetchAsAllPrivsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ExecuteFetchAsAppStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ExecuteFetchAsAppResponse) error
}

type drpcTabletManager_ExecuteFetchAsAppStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ExecuteFetchAsAppStream) SendAndClose(m *tabletmanagerdata.ExecuteFetchAsAppResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ReplicationStatusStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ReplicationStatusResponse) error
}

type drpcTabletManager_ReplicationStatusStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ReplicationStatusStream) SendAndClose(m *tabletmanagerdata.ReplicationStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_MasterStatusStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.MasterStatusResponse) error
}

type drpcTabletManager_MasterStatusStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_MasterStatusStream) SendAndClose(m *tabletmanagerdata.MasterStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_MasterPositionStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.MasterPositionResponse) error
}

type drpcTabletManager_MasterPositionStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_MasterPositionStream) SendAndClose(m *tabletmanagerdata.MasterPositionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_WaitForPositionStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.WaitForPositionResponse) error
}

type drpcTabletManager_WaitForPositionStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_WaitForPositionStream) SendAndClose(m *tabletmanagerdata.WaitForPositionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_StopReplicationStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.StopReplicationResponse) error
}

type drpcTabletManager_StopReplicationStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_StopReplicationStream) SendAndClose(m *tabletmanagerdata.StopReplicationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_StopReplicationMinimumStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.StopReplicationMinimumResponse) error
}

type drpcTabletManager_StopReplicationMinimumStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_StopReplicationMinimumStream) SendAndClose(m *tabletmanagerdata.StopReplicationMinimumResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_StartReplicationStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.StartReplicationResponse) error
}

type drpcTabletManager_StartReplicationStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_StartReplicationStream) SendAndClose(m *tabletmanagerdata.StartReplicationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_StartReplicationUntilAfterStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.StartReplicationUntilAfterResponse) error
}

type drpcTabletManager_StartReplicationUntilAfterStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_StartReplicationUntilAfterStream) SendAndClose(m *tabletmanagerdata.StartReplicationUntilAfterResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_GetReplicasStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.GetReplicasResponse) error
}

type drpcTabletManager_GetReplicasStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_GetReplicasStream) SendAndClose(m *tabletmanagerdata.GetReplicasResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_VReplicationExecStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.VReplicationExecResponse) error
}

type drpcTabletManager_VReplicationExecStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_VReplicationExecStream) SendAndClose(m *tabletmanagerdata.VReplicationExecResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_VReplicationWaitForPosStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.VReplicationWaitForPosResponse) error
}

type drpcTabletManager_VReplicationWaitForPosStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_VReplicationWaitForPosStream) SendAndClose(m *tabletmanagerdata.VReplicationWaitForPosResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ResetReplicationStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ResetReplicationResponse) error
}

type drpcTabletManager_ResetReplicationStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ResetReplicationStream) SendAndClose(m *tabletmanagerdata.ResetReplicationResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_InitMasterStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.InitMasterResponse) error
}

type drpcTabletManager_InitMasterStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_InitMasterStream) SendAndClose(m *tabletmanagerdata.InitMasterResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_PopulateReparentJournalStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.PopulateReparentJournalResponse) error
}

type drpcTabletManager_PopulateReparentJournalStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_PopulateReparentJournalStream) SendAndClose(m *tabletmanagerdata.PopulateReparentJournalResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_InitReplicaStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.InitReplicaResponse) error
}

type drpcTabletManager_InitReplicaStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_InitReplicaStream) SendAndClose(m *tabletmanagerdata.InitReplicaResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_DemoteMasterStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.DemoteMasterResponse) error
}

type drpcTabletManager_DemoteMasterStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_DemoteMasterStream) SendAndClose(m *tabletmanagerdata.DemoteMasterResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_UndoDemoteMasterStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.UndoDemoteMasterResponse) error
}

type drpcTabletManager_UndoDemoteMasterStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_UndoDemoteMasterStream) SendAndClose(m *tabletmanagerdata.UndoDemoteMasterResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ReplicaWasPromotedStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ReplicaWasPromotedResponse) error
}

type drpcTabletManager_ReplicaWasPromotedStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ReplicaWasPromotedStream) SendAndClose(m *tabletmanagerdata.ReplicaWasPromotedResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_SetMasterStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.SetMasterResponse) error
}

type drpcTabletManager_SetMasterStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_SetMasterStream) SendAndClose(m *tabletmanagerdata.SetMasterResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_ReplicaWasRestartedStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.ReplicaWasRestartedResponse) error
}

type drpcTabletManager_ReplicaWasRestartedStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_ReplicaWasRestartedStream) SendAndClose(m *tabletmanagerdata.ReplicaWasRestartedResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_StopReplicationAndGetStatusStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.StopReplicationAndGetStatusResponse) error
}

type drpcTabletManager_StopReplicationAndGetStatusStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_StopReplicationAndGetStatusStream) SendAndClose(m *tabletmanagerdata.StopReplicationAndGetStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_PromoteReplicaStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.PromoteReplicaResponse) error
}

type drpcTabletManager_PromoteReplicaStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_PromoteReplicaStream) SendAndClose(m *tabletmanagerdata.PromoteReplicaResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCTabletManager_BackupStream interface {
	drpc.Stream
	Send(*tabletmanagerdata.BackupResponse) error
}

type drpcTabletManager_BackupStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_BackupStream) Send(m *tabletmanagerdata.BackupResponse) error {
	return x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{})
}

type DRPCTabletManager_RestoreFromBackupStream interface {
	drpc.Stream
	Send(*tabletmanagerdata.RestoreFromBackupResponse) error
}

type drpcTabletManager_RestoreFromBackupStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_RestoreFromBackupStream) Send(m *tabletmanagerdata.RestoreFromBackupResponse) error {
	return x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{})
}

type DRPCTabletManager_VExecStream interface {
	drpc.Stream
	SendAndClose(*tabletmanagerdata.VExecResponse) error
}

type drpcTabletManager_VExecStream struct {
	drpc.Stream
}

func (x *drpcTabletManager_VExecStream) SendAndClose(m *tabletmanagerdata.VExecResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_tabletmanagerservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
