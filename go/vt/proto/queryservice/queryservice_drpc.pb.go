// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: queryservice.proto

package queryservice

import (
	context "context"
	errors "errors"

	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	binlogdata "vitess.io/vitess/go/vt/proto/binlogdata"
	query "vitess.io/vitess/go/vt/proto/query"
)

type drpcEncoding_File_queryservice_proto struct{}

type imarshal interface {
	Marshal() ([]byte, error)
	Unmarshal([]byte) error
}

func (drpcEncoding_File_queryservice_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return msg.(imarshal).Marshal()
}

func (drpcEncoding_File_queryservice_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return msg.(imarshal).Unmarshal(buf)
}

func (drpcEncoding_File_queryservice_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	panic("unimplemented!")
}

func (drpcEncoding_File_queryservice_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	panic("unimplemented!")
}

type DRPCQueryClient interface {
	DRPCConn() drpc.Conn

	Execute(ctx context.Context, in *query.ExecuteRequest) (*query.ExecuteResponse, error)
	ExecuteBatch(ctx context.Context, in *query.ExecuteBatchRequest) (*query.ExecuteBatchResponse, error)
	StreamExecute(ctx context.Context, in *query.StreamExecuteRequest) (DRPCQuery_StreamExecuteClient, error)
	Begin(ctx context.Context, in *query.BeginRequest) (*query.BeginResponse, error)
	Commit(ctx context.Context, in *query.CommitRequest) (*query.CommitResponse, error)
	Rollback(ctx context.Context, in *query.RollbackRequest) (*query.RollbackResponse, error)
	Prepare(ctx context.Context, in *query.PrepareRequest) (*query.PrepareResponse, error)
	CommitPrepared(ctx context.Context, in *query.CommitPreparedRequest) (*query.CommitPreparedResponse, error)
	RollbackPrepared(ctx context.Context, in *query.RollbackPreparedRequest) (*query.RollbackPreparedResponse, error)
	CreateTransaction(ctx context.Context, in *query.CreateTransactionRequest) (*query.CreateTransactionResponse, error)
	StartCommit(ctx context.Context, in *query.StartCommitRequest) (*query.StartCommitResponse, error)
	SetRollback(ctx context.Context, in *query.SetRollbackRequest) (*query.SetRollbackResponse, error)
	ConcludeTransaction(ctx context.Context, in *query.ConcludeTransactionRequest) (*query.ConcludeTransactionResponse, error)
	ReadTransaction(ctx context.Context, in *query.ReadTransactionRequest) (*query.ReadTransactionResponse, error)
	BeginExecute(ctx context.Context, in *query.BeginExecuteRequest) (*query.BeginExecuteResponse, error)
	BeginExecuteBatch(ctx context.Context, in *query.BeginExecuteBatchRequest) (*query.BeginExecuteBatchResponse, error)
	MessageStream(ctx context.Context, in *query.MessageStreamRequest) (DRPCQuery_MessageStreamClient, error)
	MessageAck(ctx context.Context, in *query.MessageAckRequest) (*query.MessageAckResponse, error)
	ReserveExecute(ctx context.Context, in *query.ReserveExecuteRequest) (*query.ReserveExecuteResponse, error)
	ReserveBeginExecute(ctx context.Context, in *query.ReserveBeginExecuteRequest) (*query.ReserveBeginExecuteResponse, error)
	Release(ctx context.Context, in *query.ReleaseRequest) (*query.ReleaseResponse, error)
	StreamHealth(ctx context.Context, in *query.StreamHealthRequest) (DRPCQuery_StreamHealthClient, error)
	VStream(ctx context.Context, in *binlogdata.VStreamRequest) (DRPCQuery_VStreamClient, error)
	VStreamRows(ctx context.Context, in *binlogdata.VStreamRowsRequest) (DRPCQuery_VStreamRowsClient, error)
	VStreamResults(ctx context.Context, in *binlogdata.VStreamResultsRequest) (DRPCQuery_VStreamResultsClient, error)
}

type drpcQueryClient struct {
	cc drpc.Conn
}

func NewDRPCQueryClient(cc drpc.Conn) DRPCQueryClient {
	return &drpcQueryClient{cc}
}

func (c *drpcQueryClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcQueryClient) Execute(ctx context.Context, in *query.ExecuteRequest) (*query.ExecuteResponse, error) {
	out := new(query.ExecuteResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/Execute", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) ExecuteBatch(ctx context.Context, in *query.ExecuteBatchRequest) (*query.ExecuteBatchResponse, error) {
	out := new(query.ExecuteBatchResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/ExecuteBatch", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) StreamExecute(ctx context.Context, in *query.StreamExecuteRequest) (DRPCQuery_StreamExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, "/queryservice.Query/StreamExecute", drpcEncoding_File_queryservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_StreamExecuteClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_StreamExecuteClient interface {
	drpc.Stream
	Recv() (*query.StreamExecuteResponse, error)
}

type drpcQuery_StreamExecuteClient struct {
	drpc.Stream
}

func (x *drpcQuery_StreamExecuteClient) Recv() (*query.StreamExecuteResponse, error) {
	m := new(query.StreamExecuteResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcQueryClient) Begin(ctx context.Context, in *query.BeginRequest) (*query.BeginResponse, error) {
	out := new(query.BeginResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/Begin", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) Commit(ctx context.Context, in *query.CommitRequest) (*query.CommitResponse, error) {
	out := new(query.CommitResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/Commit", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) Rollback(ctx context.Context, in *query.RollbackRequest) (*query.RollbackResponse, error) {
	out := new(query.RollbackResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/Rollback", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) Prepare(ctx context.Context, in *query.PrepareRequest) (*query.PrepareResponse, error) {
	out := new(query.PrepareResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/Prepare", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) CommitPrepared(ctx context.Context, in *query.CommitPreparedRequest) (*query.CommitPreparedResponse, error) {
	out := new(query.CommitPreparedResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/CommitPrepared", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) RollbackPrepared(ctx context.Context, in *query.RollbackPreparedRequest) (*query.RollbackPreparedResponse, error) {
	out := new(query.RollbackPreparedResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/RollbackPrepared", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) CreateTransaction(ctx context.Context, in *query.CreateTransactionRequest) (*query.CreateTransactionResponse, error) {
	out := new(query.CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/CreateTransaction", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) StartCommit(ctx context.Context, in *query.StartCommitRequest) (*query.StartCommitResponse, error) {
	out := new(query.StartCommitResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/StartCommit", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) SetRollback(ctx context.Context, in *query.SetRollbackRequest) (*query.SetRollbackResponse, error) {
	out := new(query.SetRollbackResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/SetRollback", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) ConcludeTransaction(ctx context.Context, in *query.ConcludeTransactionRequest) (*query.ConcludeTransactionResponse, error) {
	out := new(query.ConcludeTransactionResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/ConcludeTransaction", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) ReadTransaction(ctx context.Context, in *query.ReadTransactionRequest) (*query.ReadTransactionResponse, error) {
	out := new(query.ReadTransactionResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/ReadTransaction", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) BeginExecute(ctx context.Context, in *query.BeginExecuteRequest) (*query.BeginExecuteResponse, error) {
	out := new(query.BeginExecuteResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/BeginExecute", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) BeginExecuteBatch(ctx context.Context, in *query.BeginExecuteBatchRequest) (*query.BeginExecuteBatchResponse, error) {
	out := new(query.BeginExecuteBatchResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/BeginExecuteBatch", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) MessageStream(ctx context.Context, in *query.MessageStreamRequest) (DRPCQuery_MessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/queryservice.Query/MessageStream", drpcEncoding_File_queryservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_MessageStreamClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_MessageStreamClient interface {
	drpc.Stream
	Recv() (*query.MessageStreamResponse, error)
}

type drpcQuery_MessageStreamClient struct {
	drpc.Stream
}

func (x *drpcQuery_MessageStreamClient) Recv() (*query.MessageStreamResponse, error) {
	m := new(query.MessageStreamResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcQueryClient) MessageAck(ctx context.Context, in *query.MessageAckRequest) (*query.MessageAckResponse, error) {
	out := new(query.MessageAckResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/MessageAck", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) ReserveExecute(ctx context.Context, in *query.ReserveExecuteRequest) (*query.ReserveExecuteResponse, error) {
	out := new(query.ReserveExecuteResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/ReserveExecute", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) ReserveBeginExecute(ctx context.Context, in *query.ReserveBeginExecuteRequest) (*query.ReserveBeginExecuteResponse, error) {
	out := new(query.ReserveBeginExecuteResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/ReserveBeginExecute", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) Release(ctx context.Context, in *query.ReleaseRequest) (*query.ReleaseResponse, error) {
	out := new(query.ReleaseResponse)
	err := c.cc.Invoke(ctx, "/queryservice.Query/Release", drpcEncoding_File_queryservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcQueryClient) StreamHealth(ctx context.Context, in *query.StreamHealthRequest) (DRPCQuery_StreamHealthClient, error) {
	stream, err := c.cc.NewStream(ctx, "/queryservice.Query/StreamHealth", drpcEncoding_File_queryservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_StreamHealthClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_StreamHealthClient interface {
	drpc.Stream
	Recv() (*query.StreamHealthResponse, error)
}

type drpcQuery_StreamHealthClient struct {
	drpc.Stream
}

func (x *drpcQuery_StreamHealthClient) Recv() (*query.StreamHealthResponse, error) {
	m := new(query.StreamHealthResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcQueryClient) VStream(ctx context.Context, in *binlogdata.VStreamRequest) (DRPCQuery_VStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/queryservice.Query/VStream", drpcEncoding_File_queryservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_VStreamClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_VStreamClient interface {
	drpc.Stream
	Recv() (*binlogdata.VStreamResponse, error)
}

type drpcQuery_VStreamClient struct {
	drpc.Stream
}

func (x *drpcQuery_VStreamClient) Recv() (*binlogdata.VStreamResponse, error) {
	m := new(binlogdata.VStreamResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcQueryClient) VStreamRows(ctx context.Context, in *binlogdata.VStreamRowsRequest) (DRPCQuery_VStreamRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/queryservice.Query/VStreamRows", drpcEncoding_File_queryservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_VStreamRowsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_VStreamRowsClient interface {
	drpc.Stream
	Recv() (*binlogdata.VStreamRowsResponse, error)
}

type drpcQuery_VStreamRowsClient struct {
	drpc.Stream
}

func (x *drpcQuery_VStreamRowsClient) Recv() (*binlogdata.VStreamRowsResponse, error) {
	m := new(binlogdata.VStreamRowsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcQueryClient) VStreamResults(ctx context.Context, in *binlogdata.VStreamResultsRequest) (DRPCQuery_VStreamResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/queryservice.Query/VStreamResults", drpcEncoding_File_queryservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcQuery_VStreamResultsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCQuery_VStreamResultsClient interface {
	drpc.Stream
	Recv() (*binlogdata.VStreamResultsResponse, error)
}

type drpcQuery_VStreamResultsClient struct {
	drpc.Stream
}

func (x *drpcQuery_VStreamResultsClient) Recv() (*binlogdata.VStreamResultsResponse, error) {
	m := new(binlogdata.VStreamResultsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

type DRPCQueryServer interface {
	Execute(context.Context, *query.ExecuteRequest) (*query.ExecuteResponse, error)
	ExecuteBatch(context.Context, *query.ExecuteBatchRequest) (*query.ExecuteBatchResponse, error)
	StreamExecute(*query.StreamExecuteRequest, DRPCQuery_StreamExecuteStream) error
	Begin(context.Context, *query.BeginRequest) (*query.BeginResponse, error)
	Commit(context.Context, *query.CommitRequest) (*query.CommitResponse, error)
	Rollback(context.Context, *query.RollbackRequest) (*query.RollbackResponse, error)
	Prepare(context.Context, *query.PrepareRequest) (*query.PrepareResponse, error)
	CommitPrepared(context.Context, *query.CommitPreparedRequest) (*query.CommitPreparedResponse, error)
	RollbackPrepared(context.Context, *query.RollbackPreparedRequest) (*query.RollbackPreparedResponse, error)
	CreateTransaction(context.Context, *query.CreateTransactionRequest) (*query.CreateTransactionResponse, error)
	StartCommit(context.Context, *query.StartCommitRequest) (*query.StartCommitResponse, error)
	SetRollback(context.Context, *query.SetRollbackRequest) (*query.SetRollbackResponse, error)
	ConcludeTransaction(context.Context, *query.ConcludeTransactionRequest) (*query.ConcludeTransactionResponse, error)
	ReadTransaction(context.Context, *query.ReadTransactionRequest) (*query.ReadTransactionResponse, error)
	BeginExecute(context.Context, *query.BeginExecuteRequest) (*query.BeginExecuteResponse, error)
	BeginExecuteBatch(context.Context, *query.BeginExecuteBatchRequest) (*query.BeginExecuteBatchResponse, error)
	MessageStream(*query.MessageStreamRequest, DRPCQuery_MessageStreamStream) error
	MessageAck(context.Context, *query.MessageAckRequest) (*query.MessageAckResponse, error)
	ReserveExecute(context.Context, *query.ReserveExecuteRequest) (*query.ReserveExecuteResponse, error)
	ReserveBeginExecute(context.Context, *query.ReserveBeginExecuteRequest) (*query.ReserveBeginExecuteResponse, error)
	Release(context.Context, *query.ReleaseRequest) (*query.ReleaseResponse, error)
	StreamHealth(*query.StreamHealthRequest, DRPCQuery_StreamHealthStream) error
	VStream(*binlogdata.VStreamRequest, DRPCQuery_VStreamStream) error
	VStreamRows(*binlogdata.VStreamRowsRequest, DRPCQuery_VStreamRowsStream) error
	VStreamResults(*binlogdata.VStreamResultsRequest, DRPCQuery_VStreamResultsStream) error
}

type DRPCQueryUnimplementedServer struct{}

func (s *DRPCQueryUnimplementedServer) Execute(context.Context, *query.ExecuteRequest) (*query.ExecuteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) ExecuteBatch(context.Context, *query.ExecuteBatchRequest) (*query.ExecuteBatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) StreamExecute(*query.StreamExecuteRequest, DRPCQuery_StreamExecuteStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) Begin(context.Context, *query.BeginRequest) (*query.BeginResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) Commit(context.Context, *query.CommitRequest) (*query.CommitResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) Rollback(context.Context, *query.RollbackRequest) (*query.RollbackResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) Prepare(context.Context, *query.PrepareRequest) (*query.PrepareResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) CommitPrepared(context.Context, *query.CommitPreparedRequest) (*query.CommitPreparedResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) RollbackPrepared(context.Context, *query.RollbackPreparedRequest) (*query.RollbackPreparedResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) CreateTransaction(context.Context, *query.CreateTransactionRequest) (*query.CreateTransactionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) StartCommit(context.Context, *query.StartCommitRequest) (*query.StartCommitResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) SetRollback(context.Context, *query.SetRollbackRequest) (*query.SetRollbackResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) ConcludeTransaction(context.Context, *query.ConcludeTransactionRequest) (*query.ConcludeTransactionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) ReadTransaction(context.Context, *query.ReadTransactionRequest) (*query.ReadTransactionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) BeginExecute(context.Context, *query.BeginExecuteRequest) (*query.BeginExecuteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) BeginExecuteBatch(context.Context, *query.BeginExecuteBatchRequest) (*query.BeginExecuteBatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) MessageStream(*query.MessageStreamRequest, DRPCQuery_MessageStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) MessageAck(context.Context, *query.MessageAckRequest) (*query.MessageAckResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) ReserveExecute(context.Context, *query.ReserveExecuteRequest) (*query.ReserveExecuteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) ReserveBeginExecute(context.Context, *query.ReserveBeginExecuteRequest) (*query.ReserveBeginExecuteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) Release(context.Context, *query.ReleaseRequest) (*query.ReleaseResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) StreamHealth(*query.StreamHealthRequest, DRPCQuery_StreamHealthStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) VStream(*binlogdata.VStreamRequest, DRPCQuery_VStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) VStreamRows(*binlogdata.VStreamRowsRequest, DRPCQuery_VStreamRowsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCQueryUnimplementedServer) VStreamResults(*binlogdata.VStreamResultsRequest, DRPCQuery_VStreamResultsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCQueryDescription struct{}

func (DRPCQueryDescription) NumMethods() int { return 25 }

func (DRPCQueryDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/queryservice.Query/Execute", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					Execute(
						ctx,
						in1.(*query.ExecuteRequest),
					)
			}, DRPCQueryServer.Execute, true
	case 1:
		return "/queryservice.Query/ExecuteBatch", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					ExecuteBatch(
						ctx,
						in1.(*query.ExecuteBatchRequest),
					)
			}, DRPCQueryServer.ExecuteBatch, true
	case 2:
		return "/queryservice.Query/StreamExecute", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					StreamExecute(
						in1.(*query.StreamExecuteRequest),
						&drpcQuery_StreamExecuteStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.StreamExecute, true
	case 3:
		return "/queryservice.Query/Begin", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					Begin(
						ctx,
						in1.(*query.BeginRequest),
					)
			}, DRPCQueryServer.Begin, true
	case 4:
		return "/queryservice.Query/Commit", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					Commit(
						ctx,
						in1.(*query.CommitRequest),
					)
			}, DRPCQueryServer.Commit, true
	case 5:
		return "/queryservice.Query/Rollback", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					Rollback(
						ctx,
						in1.(*query.RollbackRequest),
					)
			}, DRPCQueryServer.Rollback, true
	case 6:
		return "/queryservice.Query/Prepare", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					Prepare(
						ctx,
						in1.(*query.PrepareRequest),
					)
			}, DRPCQueryServer.Prepare, true
	case 7:
		return "/queryservice.Query/CommitPrepared", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					CommitPrepared(
						ctx,
						in1.(*query.CommitPreparedRequest),
					)
			}, DRPCQueryServer.CommitPrepared, true
	case 8:
		return "/queryservice.Query/RollbackPrepared", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					RollbackPrepared(
						ctx,
						in1.(*query.RollbackPreparedRequest),
					)
			}, DRPCQueryServer.RollbackPrepared, true
	case 9:
		return "/queryservice.Query/CreateTransaction", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					CreateTransaction(
						ctx,
						in1.(*query.CreateTransactionRequest),
					)
			}, DRPCQueryServer.CreateTransaction, true
	case 10:
		return "/queryservice.Query/StartCommit", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					StartCommit(
						ctx,
						in1.(*query.StartCommitRequest),
					)
			}, DRPCQueryServer.StartCommit, true
	case 11:
		return "/queryservice.Query/SetRollback", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					SetRollback(
						ctx,
						in1.(*query.SetRollbackRequest),
					)
			}, DRPCQueryServer.SetRollback, true
	case 12:
		return "/queryservice.Query/ConcludeTransaction", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					ConcludeTransaction(
						ctx,
						in1.(*query.ConcludeTransactionRequest),
					)
			}, DRPCQueryServer.ConcludeTransaction, true
	case 13:
		return "/queryservice.Query/ReadTransaction", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					ReadTransaction(
						ctx,
						in1.(*query.ReadTransactionRequest),
					)
			}, DRPCQueryServer.ReadTransaction, true
	case 14:
		return "/queryservice.Query/BeginExecute", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					BeginExecute(
						ctx,
						in1.(*query.BeginExecuteRequest),
					)
			}, DRPCQueryServer.BeginExecute, true
	case 15:
		return "/queryservice.Query/BeginExecuteBatch", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					BeginExecuteBatch(
						ctx,
						in1.(*query.BeginExecuteBatchRequest),
					)
			}, DRPCQueryServer.BeginExecuteBatch, true
	case 16:
		return "/queryservice.Query/MessageStream", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					MessageStream(
						in1.(*query.MessageStreamRequest),
						&drpcQuery_MessageStreamStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.MessageStream, true
	case 17:
		return "/queryservice.Query/MessageAck", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					MessageAck(
						ctx,
						in1.(*query.MessageAckRequest),
					)
			}, DRPCQueryServer.MessageAck, true
	case 18:
		return "/queryservice.Query/ReserveExecute", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					ReserveExecute(
						ctx,
						in1.(*query.ReserveExecuteRequest),
					)
			}, DRPCQueryServer.ReserveExecute, true
	case 19:
		return "/queryservice.Query/ReserveBeginExecute", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					ReserveBeginExecute(
						ctx,
						in1.(*query.ReserveBeginExecuteRequest),
					)
			}, DRPCQueryServer.ReserveBeginExecute, true
	case 20:
		return "/queryservice.Query/Release", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQueryServer).
					Release(
						ctx,
						in1.(*query.ReleaseRequest),
					)
			}, DRPCQueryServer.Release, true
	case 21:
		return "/queryservice.Query/StreamHealth", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					StreamHealth(
						in1.(*query.StreamHealthRequest),
						&drpcQuery_StreamHealthStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.StreamHealth, true
	case 22:
		return "/queryservice.Query/VStream", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					VStream(
						in1.(*binlogdata.VStreamRequest),
						&drpcQuery_VStreamStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.VStream, true
	case 23:
		return "/queryservice.Query/VStreamRows", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					VStreamRows(
						in1.(*binlogdata.VStreamRowsRequest),
						&drpcQuery_VStreamRowsStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.VStreamRows, true
	case 24:
		return "/queryservice.Query/VStreamResults", drpcEncoding_File_queryservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCQueryServer).
					VStreamResults(
						in1.(*binlogdata.VStreamResultsRequest),
						&drpcQuery_VStreamResultsStream{in2.(drpc.Stream)},
					)
			}, DRPCQueryServer.VStreamResults, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterQuery(mux drpc.Mux, impl DRPCQueryServer) error {
	return mux.Register(impl, DRPCQueryDescription{})
}

type DRPCQuery_ExecuteStream interface {
	drpc.Stream
	SendAndClose(*query.ExecuteResponse) error
}

type drpcQuery_ExecuteStream struct {
	drpc.Stream
}

func (x *drpcQuery_ExecuteStream) SendAndClose(m *query.ExecuteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_ExecuteBatchStream interface {
	drpc.Stream
	SendAndClose(*query.ExecuteBatchResponse) error
}

type drpcQuery_ExecuteBatchStream struct {
	drpc.Stream
}

func (x *drpcQuery_ExecuteBatchStream) SendAndClose(m *query.ExecuteBatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_StreamExecuteStream interface {
	drpc.Stream
	Send(*query.StreamExecuteResponse) error
}

type drpcQuery_StreamExecuteStream struct {
	drpc.Stream
}

func (x *drpcQuery_StreamExecuteStream) Send(m *query.StreamExecuteResponse) error {
	return x.MsgSend(m, drpcEncoding_File_queryservice_proto{})
}

type DRPCQuery_BeginStream interface {
	drpc.Stream
	SendAndClose(*query.BeginResponse) error
}

type drpcQuery_BeginStream struct {
	drpc.Stream
}

func (x *drpcQuery_BeginStream) SendAndClose(m *query.BeginResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_CommitStream interface {
	drpc.Stream
	SendAndClose(*query.CommitResponse) error
}

type drpcQuery_CommitStream struct {
	drpc.Stream
}

func (x *drpcQuery_CommitStream) SendAndClose(m *query.CommitResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_RollbackStream interface {
	drpc.Stream
	SendAndClose(*query.RollbackResponse) error
}

type drpcQuery_RollbackStream struct {
	drpc.Stream
}

func (x *drpcQuery_RollbackStream) SendAndClose(m *query.RollbackResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_PrepareStream interface {
	drpc.Stream
	SendAndClose(*query.PrepareResponse) error
}

type drpcQuery_PrepareStream struct {
	drpc.Stream
}

func (x *drpcQuery_PrepareStream) SendAndClose(m *query.PrepareResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_CommitPreparedStream interface {
	drpc.Stream
	SendAndClose(*query.CommitPreparedResponse) error
}

type drpcQuery_CommitPreparedStream struct {
	drpc.Stream
}

func (x *drpcQuery_CommitPreparedStream) SendAndClose(m *query.CommitPreparedResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_RollbackPreparedStream interface {
	drpc.Stream
	SendAndClose(*query.RollbackPreparedResponse) error
}

type drpcQuery_RollbackPreparedStream struct {
	drpc.Stream
}

func (x *drpcQuery_RollbackPreparedStream) SendAndClose(m *query.RollbackPreparedResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_CreateTransactionStream interface {
	drpc.Stream
	SendAndClose(*query.CreateTransactionResponse) error
}

type drpcQuery_CreateTransactionStream struct {
	drpc.Stream
}

func (x *drpcQuery_CreateTransactionStream) SendAndClose(m *query.CreateTransactionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_StartCommitStream interface {
	drpc.Stream
	SendAndClose(*query.StartCommitResponse) error
}

type drpcQuery_StartCommitStream struct {
	drpc.Stream
}

func (x *drpcQuery_StartCommitStream) SendAndClose(m *query.StartCommitResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_SetRollbackStream interface {
	drpc.Stream
	SendAndClose(*query.SetRollbackResponse) error
}

type drpcQuery_SetRollbackStream struct {
	drpc.Stream
}

func (x *drpcQuery_SetRollbackStream) SendAndClose(m *query.SetRollbackResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_ConcludeTransactionStream interface {
	drpc.Stream
	SendAndClose(*query.ConcludeTransactionResponse) error
}

type drpcQuery_ConcludeTransactionStream struct {
	drpc.Stream
}

func (x *drpcQuery_ConcludeTransactionStream) SendAndClose(m *query.ConcludeTransactionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_ReadTransactionStream interface {
	drpc.Stream
	SendAndClose(*query.ReadTransactionResponse) error
}

type drpcQuery_ReadTransactionStream struct {
	drpc.Stream
}

func (x *drpcQuery_ReadTransactionStream) SendAndClose(m *query.ReadTransactionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_BeginExecuteStream interface {
	drpc.Stream
	SendAndClose(*query.BeginExecuteResponse) error
}

type drpcQuery_BeginExecuteStream struct {
	drpc.Stream
}

func (x *drpcQuery_BeginExecuteStream) SendAndClose(m *query.BeginExecuteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_BeginExecuteBatchStream interface {
	drpc.Stream
	SendAndClose(*query.BeginExecuteBatchResponse) error
}

type drpcQuery_BeginExecuteBatchStream struct {
	drpc.Stream
}

func (x *drpcQuery_BeginExecuteBatchStream) SendAndClose(m *query.BeginExecuteBatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_MessageStreamStream interface {
	drpc.Stream
	Send(*query.MessageStreamResponse) error
}

type drpcQuery_MessageStreamStream struct {
	drpc.Stream
}

func (x *drpcQuery_MessageStreamStream) Send(m *query.MessageStreamResponse) error {
	return x.MsgSend(m, drpcEncoding_File_queryservice_proto{})
}

type DRPCQuery_MessageAckStream interface {
	drpc.Stream
	SendAndClose(*query.MessageAckResponse) error
}

type drpcQuery_MessageAckStream struct {
	drpc.Stream
}

func (x *drpcQuery_MessageAckStream) SendAndClose(m *query.MessageAckResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_ReserveExecuteStream interface {
	drpc.Stream
	SendAndClose(*query.ReserveExecuteResponse) error
}

type drpcQuery_ReserveExecuteStream struct {
	drpc.Stream
}

func (x *drpcQuery_ReserveExecuteStream) SendAndClose(m *query.ReserveExecuteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_ReserveBeginExecuteStream interface {
	drpc.Stream
	SendAndClose(*query.ReserveBeginExecuteResponse) error
}

type drpcQuery_ReserveBeginExecuteStream struct {
	drpc.Stream
}

func (x *drpcQuery_ReserveBeginExecuteStream) SendAndClose(m *query.ReserveBeginExecuteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_ReleaseStream interface {
	drpc.Stream
	SendAndClose(*query.ReleaseResponse) error
}

type drpcQuery_ReleaseStream struct {
	drpc.Stream
}

func (x *drpcQuery_ReleaseStream) SendAndClose(m *query.ReleaseResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_queryservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCQuery_StreamHealthStream interface {
	drpc.Stream
	Send(*query.StreamHealthResponse) error
}

type drpcQuery_StreamHealthStream struct {
	drpc.Stream
}

func (x *drpcQuery_StreamHealthStream) Send(m *query.StreamHealthResponse) error {
	return x.MsgSend(m, drpcEncoding_File_queryservice_proto{})
}

type DRPCQuery_VStreamStream interface {
	drpc.Stream
	Send(*binlogdata.VStreamResponse) error
}

type drpcQuery_VStreamStream struct {
	drpc.Stream
}

func (x *drpcQuery_VStreamStream) Send(m *binlogdata.VStreamResponse) error {
	return x.MsgSend(m, drpcEncoding_File_queryservice_proto{})
}

type DRPCQuery_VStreamRowsStream interface {
	drpc.Stream
	Send(*binlogdata.VStreamRowsResponse) error
}

type drpcQuery_VStreamRowsStream struct {
	drpc.Stream
}

func (x *drpcQuery_VStreamRowsStream) Send(m *binlogdata.VStreamRowsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_queryservice_proto{})
}

type DRPCQuery_VStreamResultsStream interface {
	drpc.Stream
	Send(*binlogdata.VStreamResultsResponse) error
}

type drpcQuery_VStreamResultsStream struct {
	drpc.Stream
}

func (x *drpcQuery_VStreamResultsStream) Send(m *binlogdata.VStreamResultsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_queryservice_proto{})
}
