// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: mysqlctl.proto

package mysqlctl

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_mysqlctl_proto struct{}

func (drpcEncoding_File_mysqlctl_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_mysqlctl_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_mysqlctl_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_mysqlctl_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCMysqlCtlClient interface {
	DRPCConn() drpc.Conn

	Start(ctx context.Context, in *StartRequest) (*StartResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest) (*ShutdownResponse, error)
	RunMysqlUpgrade(ctx context.Context, in *RunMysqlUpgradeRequest) (*RunMysqlUpgradeResponse, error)
	ReinitConfig(ctx context.Context, in *ReinitConfigRequest) (*ReinitConfigResponse, error)
	RefreshConfig(ctx context.Context, in *RefreshConfigRequest) (*RefreshConfigResponse, error)
}

type drpcMysqlCtlClient struct {
	cc drpc.Conn
}

func NewDRPCMysqlCtlClient(cc drpc.Conn) DRPCMysqlCtlClient {
	return &drpcMysqlCtlClient{cc}
}

func (c *drpcMysqlCtlClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcMysqlCtlClient) Start(ctx context.Context, in *StartRequest) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/mysqlctl.MysqlCtl/Start", drpcEncoding_File_mysqlctl_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMysqlCtlClient) Shutdown(ctx context.Context, in *ShutdownRequest) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/mysqlctl.MysqlCtl/Shutdown", drpcEncoding_File_mysqlctl_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMysqlCtlClient) RunMysqlUpgrade(ctx context.Context, in *RunMysqlUpgradeRequest) (*RunMysqlUpgradeResponse, error) {
	out := new(RunMysqlUpgradeResponse)
	err := c.cc.Invoke(ctx, "/mysqlctl.MysqlCtl/RunMysqlUpgrade", drpcEncoding_File_mysqlctl_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMysqlCtlClient) ReinitConfig(ctx context.Context, in *ReinitConfigRequest) (*ReinitConfigResponse, error) {
	out := new(ReinitConfigResponse)
	err := c.cc.Invoke(ctx, "/mysqlctl.MysqlCtl/ReinitConfig", drpcEncoding_File_mysqlctl_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcMysqlCtlClient) RefreshConfig(ctx context.Context, in *RefreshConfigRequest) (*RefreshConfigResponse, error) {
	out := new(RefreshConfigResponse)
	err := c.cc.Invoke(ctx, "/mysqlctl.MysqlCtl/RefreshConfig", drpcEncoding_File_mysqlctl_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCMysqlCtlServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	RunMysqlUpgrade(context.Context, *RunMysqlUpgradeRequest) (*RunMysqlUpgradeResponse, error)
	ReinitConfig(context.Context, *ReinitConfigRequest) (*ReinitConfigResponse, error)
	RefreshConfig(context.Context, *RefreshConfigRequest) (*RefreshConfigResponse, error)
}

type DRPCMysqlCtlUnimplementedServer struct{}

func (s *DRPCMysqlCtlUnimplementedServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCMysqlCtlUnimplementedServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCMysqlCtlUnimplementedServer) RunMysqlUpgrade(context.Context, *RunMysqlUpgradeRequest) (*RunMysqlUpgradeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCMysqlCtlUnimplementedServer) ReinitConfig(context.Context, *ReinitConfigRequest) (*ReinitConfigResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCMysqlCtlUnimplementedServer) RefreshConfig(context.Context, *RefreshConfigRequest) (*RefreshConfigResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCMysqlCtlDescription struct{}

func (DRPCMysqlCtlDescription) NumMethods() int { return 5 }

func (DRPCMysqlCtlDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/mysqlctl.MysqlCtl/Start", drpcEncoding_File_mysqlctl_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMysqlCtlServer).
					Start(
						ctx,
						in1.(*StartRequest),
					)
			}, DRPCMysqlCtlServer.Start, true
	case 1:
		return "/mysqlctl.MysqlCtl/Shutdown", drpcEncoding_File_mysqlctl_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMysqlCtlServer).
					Shutdown(
						ctx,
						in1.(*ShutdownRequest),
					)
			}, DRPCMysqlCtlServer.Shutdown, true
	case 2:
		return "/mysqlctl.MysqlCtl/RunMysqlUpgrade", drpcEncoding_File_mysqlctl_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMysqlCtlServer).
					RunMysqlUpgrade(
						ctx,
						in1.(*RunMysqlUpgradeRequest),
					)
			}, DRPCMysqlCtlServer.RunMysqlUpgrade, true
	case 3:
		return "/mysqlctl.MysqlCtl/ReinitConfig", drpcEncoding_File_mysqlctl_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMysqlCtlServer).
					ReinitConfig(
						ctx,
						in1.(*ReinitConfigRequest),
					)
			}, DRPCMysqlCtlServer.ReinitConfig, true
	case 4:
		return "/mysqlctl.MysqlCtl/RefreshConfig", drpcEncoding_File_mysqlctl_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCMysqlCtlServer).
					RefreshConfig(
						ctx,
						in1.(*RefreshConfigRequest),
					)
			}, DRPCMysqlCtlServer.RefreshConfig, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterMysqlCtl(mux drpc.Mux, impl DRPCMysqlCtlServer) error {
	return mux.Register(impl, DRPCMysqlCtlDescription{})
}

type DRPCMysqlCtl_StartStream interface {
	drpc.Stream
	SendAndClose(*StartResponse) error
}

type drpcMysqlCtl_StartStream struct {
	drpc.Stream
}

func (x *drpcMysqlCtl_StartStream) SendAndClose(m *StartResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_mysqlctl_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMysqlCtl_ShutdownStream interface {
	drpc.Stream
	SendAndClose(*ShutdownResponse) error
}

type drpcMysqlCtl_ShutdownStream struct {
	drpc.Stream
}

func (x *drpcMysqlCtl_ShutdownStream) SendAndClose(m *ShutdownResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_mysqlctl_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMysqlCtl_RunMysqlUpgradeStream interface {
	drpc.Stream
	SendAndClose(*RunMysqlUpgradeResponse) error
}

type drpcMysqlCtl_RunMysqlUpgradeStream struct {
	drpc.Stream
}

func (x *drpcMysqlCtl_RunMysqlUpgradeStream) SendAndClose(m *RunMysqlUpgradeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_mysqlctl_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMysqlCtl_ReinitConfigStream interface {
	drpc.Stream
	SendAndClose(*ReinitConfigResponse) error
}

type drpcMysqlCtl_ReinitConfigStream struct {
	drpc.Stream
}

func (x *drpcMysqlCtl_ReinitConfigStream) SendAndClose(m *ReinitConfigResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_mysqlctl_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCMysqlCtl_RefreshConfigStream interface {
	drpc.Stream
	SendAndClose(*RefreshConfigResponse) error
}

type drpcMysqlCtl_RefreshConfigStream struct {
	drpc.Stream
}

func (x *drpcMysqlCtl_RefreshConfigStream) SendAndClose(m *RefreshConfigResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_mysqlctl_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
