// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: binlogservice.proto

package binlogservice

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	binlogdata "vitess.io/vitess/go/vt/proto/binlogdata"
)

type drpcEncoding_File_binlogservice_proto struct{}

func (drpcEncoding_File_binlogservice_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_binlogservice_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_binlogservice_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_binlogservice_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCUpdateStreamClient interface {
	DRPCConn() drpc.Conn

	StreamKeyRange(ctx context.Context, in *binlogdata.StreamKeyRangeRequest) (DRPCUpdateStream_StreamKeyRangeClient, error)
	StreamTables(ctx context.Context, in *binlogdata.StreamTablesRequest) (DRPCUpdateStream_StreamTablesClient, error)
}

type drpcUpdateStreamClient struct {
	cc drpc.Conn
}

func NewDRPCUpdateStreamClient(cc drpc.Conn) DRPCUpdateStreamClient {
	return &drpcUpdateStreamClient{cc}
}

func (c *drpcUpdateStreamClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcUpdateStreamClient) StreamKeyRange(ctx context.Context, in *binlogdata.StreamKeyRangeRequest) (DRPCUpdateStream_StreamKeyRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, "/binlogservice.UpdateStream/StreamKeyRange", drpcEncoding_File_binlogservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcUpdateStream_StreamKeyRangeClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_binlogservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCUpdateStream_StreamKeyRangeClient interface {
	drpc.Stream
	Recv() (*binlogdata.StreamKeyRangeResponse, error)
}

type drpcUpdateStream_StreamKeyRangeClient struct {
	drpc.Stream
}

func (x *drpcUpdateStream_StreamKeyRangeClient) Recv() (*binlogdata.StreamKeyRangeResponse, error) {
	m := new(binlogdata.StreamKeyRangeResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_binlogservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcUpdateStreamClient) StreamTables(ctx context.Context, in *binlogdata.StreamTablesRequest) (DRPCUpdateStream_StreamTablesClient, error) {
	stream, err := c.cc.NewStream(ctx, "/binlogservice.UpdateStream/StreamTables", drpcEncoding_File_binlogservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcUpdateStream_StreamTablesClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_binlogservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCUpdateStream_StreamTablesClient interface {
	drpc.Stream
	Recv() (*binlogdata.StreamTablesResponse, error)
}

type drpcUpdateStream_StreamTablesClient struct {
	drpc.Stream
}

func (x *drpcUpdateStream_StreamTablesClient) Recv() (*binlogdata.StreamTablesResponse, error) {
	m := new(binlogdata.StreamTablesResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_binlogservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

type DRPCUpdateStreamServer interface {
	StreamKeyRange(*binlogdata.StreamKeyRangeRequest, DRPCUpdateStream_StreamKeyRangeStream) error
	StreamTables(*binlogdata.StreamTablesRequest, DRPCUpdateStream_StreamTablesStream) error
}

type DRPCUpdateStreamUnimplementedServer struct{}

func (s *DRPCUpdateStreamUnimplementedServer) StreamKeyRange(*binlogdata.StreamKeyRangeRequest, DRPCUpdateStream_StreamKeyRangeStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCUpdateStreamUnimplementedServer) StreamTables(*binlogdata.StreamTablesRequest, DRPCUpdateStream_StreamTablesStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCUpdateStreamDescription struct{}

func (DRPCUpdateStreamDescription) NumMethods() int { return 2 }

func (DRPCUpdateStreamDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/binlogservice.UpdateStream/StreamKeyRange", drpcEncoding_File_binlogservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCUpdateStreamServer).
					StreamKeyRange(
						in1.(*binlogdata.StreamKeyRangeRequest),
						&drpcUpdateStream_StreamKeyRangeStream{in2.(drpc.Stream)},
					)
			}, DRPCUpdateStreamServer.StreamKeyRange, true
	case 1:
		return "/binlogservice.UpdateStream/StreamTables", drpcEncoding_File_binlogservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCUpdateStreamServer).
					StreamTables(
						in1.(*binlogdata.StreamTablesRequest),
						&drpcUpdateStream_StreamTablesStream{in2.(drpc.Stream)},
					)
			}, DRPCUpdateStreamServer.StreamTables, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterUpdateStream(mux drpc.Mux, impl DRPCUpdateStreamServer) error {
	return mux.Register(impl, DRPCUpdateStreamDescription{})
}

type DRPCUpdateStream_StreamKeyRangeStream interface {
	drpc.Stream
	Send(*binlogdata.StreamKeyRangeResponse) error
}

type drpcUpdateStream_StreamKeyRangeStream struct {
	drpc.Stream
}

func (x *drpcUpdateStream_StreamKeyRangeStream) Send(m *binlogdata.StreamKeyRangeResponse) error {
	return x.MsgSend(m, drpcEncoding_File_binlogservice_proto{})
}

type DRPCUpdateStream_StreamTablesStream interface {
	drpc.Stream
	Send(*binlogdata.StreamTablesResponse) error
}

type drpcUpdateStream_StreamTablesStream struct {
	drpc.Stream
}

func (x *drpcUpdateStream_StreamTablesStream) Send(m *binlogdata.StreamTablesResponse) error {
	return x.MsgSend(m, drpcEncoding_File_binlogservice_proto{})
}
